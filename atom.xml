<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ZPF博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zhangpf2000.github.io/"/>
  <updated>2021-04-28T09:34:31.309Z</updated>
  <id>https://zhangpf2000.github.io/</id>
  
  <author>
    <name>ZhangPF2000</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>02_看书学习shell_bash总结</title>
    <link href="https://zhangpf2000.github.io/2021/04/28/Linux_Bash/02_%E7%9C%8B%E4%B9%A6%E5%AD%A6%E4%B9%A0shell_bash%E6%80%BB%E7%BB%93.html/"/>
    <id>https://zhangpf2000.github.io/2021/04/28/Linux_Bash/02_%E7%9C%8B%E4%B9%A6%E5%AD%A6%E4%B9%A0shell_bash%E6%80%BB%E7%BB%93.html/</id>
    <published>2021-04-28T09:24:54.000Z</published>
    <updated>2021-04-28T09:34:31.309Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>本来打算学着书写着博客呢<br>结果这几天事有点多,没时间写<br>但是有时间看书,书看完了,但博客也还没写<br>尴尬了……….</p></blockquote><span id="more"></span><blockquote><p>看完这本书的感受:</p><ul><li>这是一本适合初学者的书</li><li>这本书很基础,好多的内容都可以理解</li><li>这本书后面有点高级,不过目前我还没用到</li><li>书看完了,再写博客效果也差了点</li><li>所以我打算不写关于这本书的博客了</li><li>但是这个 bash 专栏的博客还是会写的</li><li>会记录一些我遇到的一些 nb 的脚本和知识</li><li>我目前在<a href="https://www.codewars.com">codewars</a>练习我的代码水平</li><li>在上面我填写了 bash 选项,目前整体水平是<code>5kyu</code>而 shell 是<code>7kyu</code></li><li>上面的代码很有水平,能有效的提高我的代码水平</li><li>关于我的大部分代码都是在<code>codewars</code><a href="https://zhangpf2000.github.io/categories/codewars/shell/">专栏</a>这说明了</li><li>这里就会更新很慢了</li><li>特此说明一下</li></ul></blockquote><h1 id="希望能对你有所帮助-p-o"><a href="#希望能对你有所帮助-p-o" class="headerlink" title="希望能对你有所帮助(p_o)"></a>希望能对你有所帮助(p_o)</h1>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;h1 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h1&gt;&lt;p&gt;本来打算学着书写着博客呢&lt;br&gt;结果这几天事有点多,没时间写&lt;br&gt;但是有时间看书,书看完了,但博客也还没写&lt;br&gt;尴尬了……….&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="linux" scheme="https://zhangpf2000.github.io/categories/linux/"/>
    
      <category term="Bash" scheme="https://zhangpf2000.github.io/categories/linux/Bash/"/>
    
    
      <category term="Bash" scheme="https://zhangpf2000.github.io/tags/Bash/"/>
    
  </entry>
  
  <entry>
    <title>16_shell_计算统计数据并返回</title>
    <link href="https://zhangpf2000.github.io/2021/04/28/codewars/16_shell_%E8%AE%A1%E7%AE%97%E7%BB%9F%E8%AE%A1%E6%95%B0%E6%8D%AE%E5%B9%B6%E8%BF%94%E5%9B%9E.html/"/>
    <id>https://zhangpf2000.github.io/2021/04/28/codewars/16_shell_%E8%AE%A1%E7%AE%97%E7%BB%9F%E8%AE%A1%E6%95%B0%E6%8D%AE%E5%B9%B6%E8%BF%94%E5%9B%9E.html/</id>
    <published>2021-04-28T09:17:43.000Z</published>
    <updated>2021-04-28T09:23:12.025Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://www.codewars.com/kata/54dc6f5a224c26032800005c/train/shell">题目链接</a><br>内容介绍</p></blockquote><figure class="highlight text"><figcaption><span>内容介绍 >folded</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">A bookseller has lots of books classified in 26 categories labeled A, B, ... Z. Each book has a code c of 3, 4, 5 or more characters. The 1st character of a code is a capital letter which defines the book category.</span><br><span class="line"></span><br><span class="line">In the bookseller&#x27;s stocklist each code c is followed by a space and by a positive integer n (int n &gt;= 0) which indicates the quantity of books of this code in stock.</span><br><span class="line"></span><br><span class="line">For example an extract of a stocklist could be:</span><br><span class="line"></span><br><span class="line">L = &#123;&quot;ABART 20&quot;, &quot;CDXEF 50&quot;, &quot;BKWRK 25&quot;, &quot;BTSQZ 89&quot;, &quot;DRTYM 60&quot;&#125;.</span><br><span class="line">or</span><br><span class="line">L = [&quot;ABART 20&quot;, &quot;CDXEF 50&quot;, &quot;BKWRK 25&quot;, &quot;BTSQZ 89&quot;, &quot;DRTYM 60&quot;] or ....</span><br><span class="line"></span><br><span class="line">You will be given a stocklist (e.g. : L) and a list of categories in capital letters e.g :</span><br><span class="line"></span><br><span class="line">M = &#123;&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;W&quot;&#125;</span><br><span class="line">or</span><br><span class="line">M = [&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;W&quot;] or ...</span><br><span class="line"></span><br><span class="line">and your task is to find all the books of L with codes belonging to each category of M and to sum their quantity according to each category.</span><br><span class="line"></span><br><span class="line">For the lists L and M of example you have to return the string (in Haskell/Clojure/Racket a list of pairs):</span><br><span class="line"></span><br><span class="line">(A : 20) - (B : 114) - (C : 50) - (W : 0)</span><br><span class="line"></span><br><span class="line">where A, B, C, W are the categories, 20 is the sum of the unique book of category A, 114 the sum corresponding to &quot;BKWRK&quot; and &quot;BTSQZ&quot;, 50 corresponding to &quot;CDXEF&quot; and 0 to category &#x27;W&#x27; since there are no code beginning with W.</span><br><span class="line"></span><br><span class="line">If L or M are empty return string is &quot;&quot; (Clojure and Racket should return an empty array/list instead).</span><br><span class="line">Note:</span><br><span class="line"></span><br><span class="line">In the result codes and their values are in the same order as in M.</span><br></pre></td></tr></table></figure><span id="more"></span><blockquote><p>我的解题思路</p><ul><li>没啥思路</li><li>不停的拆解字符串</li><li>变换字符串,提取字符串中的关键数据</li><li>组装关键数据,并返回</li></ul><p>代码如下</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="function"><span class="title">stock_list</span></span> () &#123;</span><br><span class="line">    <span class="comment"># your code</span></span><br><span class="line">    <span class="built_in">declare</span> -A m</span><br><span class="line"></span><br><span class="line">    <span class="comment">#s1=$(echo $1 | awk -F, &#x27;&#123;for(i=1;i&lt;=NF;i++)&#123;print $i&#125;&#125;&#x27;)</span></span><br><span class="line">    s2=$(<span class="built_in">echo</span> <span class="variable">$2</span> | awk -F, <span class="string">&#x27;&#123;for(i=1;i&lt;=NF;i++)&#123;print $i&#125;&#125;&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="variable">$s2</span></span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">        m[<span class="variable">$i</span>]=0</span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">    row=$(<span class="built_in">echo</span> <span class="variable">$1</span> | tr <span class="string">&#x27; &#x27;</span> <span class="string">&#x27;-&#x27;</span> | tr <span class="string">&#x27;,&#x27;</span> <span class="string">&#x27; &#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="variable">$row</span></span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">        head=$(<span class="built_in">echo</span> <span class="variable">$i</span> | grep -o ^.)</span><br><span class="line">        num=$(<span class="built_in">echo</span> <span class="variable">$i</span> | grep -o [0-9]*)</span><br><span class="line">        <span class="comment">#echo &quot;head=$head num=$num&quot;</span></span><br><span class="line">        <span class="keyword">if</span> [ <span class="variable">$&#123;m[$head]&#125;</span> ] ; <span class="keyword">then</span></span><br><span class="line">            <span class="comment">#echo &quot;$head&quot;</span></span><br><span class="line">            <span class="built_in">test</span>=$(<span class="built_in">echo</span> <span class="variable">$num</span> | grep -o <span class="string">&quot;[1-9][0-9]*&quot;</span>)</span><br><span class="line">            <span class="comment">#echo &quot;test=$test&quot;</span></span><br><span class="line">            m[<span class="variable">$head</span>]=$(($((<span class="variable">$test</span>)) + $((<span class="variable">$&#123;m[$head]&#125;</span>))))</span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 遍历map,根据key查找value</span></span><br><span class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> <span class="variable">$s2</span>;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">        <span class="comment">#echo &quot;key:$key, val:$&#123;m[$key]&#125;&quot;</span></span><br><span class="line">        str=<span class="string">&quot;<span class="variable">$str</span> - &quot;</span><span class="string">&quot;(<span class="variable">$key</span> : <span class="variable">$&#123;m[$key]&#125;</span>)&quot;</span></span><br><span class="line">        <span class="comment">#echo $str</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> [ -z <span class="variable">$row</span> ] ; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="variable">$str</span> | grep -o <span class="string">&quot;(.*$&quot;</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    <span class="comment">#for((i=0;i&lt;$(echo $s1 | wc -l); i++))</span></span><br><span class="line">    <span class="comment">#do</span></span><br><span class="line">    <span class="comment">#    echo &quot;i=$i&quot;</span></span><br><span class="line">    <span class="comment">#    head=$(echo $1 | awk -F, &#x27;&#123;print $i&#125;&#x27; | grep -o ^.)</span></span><br><span class="line">    <span class="comment">#    num=$(echo $1 | awk -F, &#x27;&#123;print $i&#125;&#x27; | grep -o [0-9]*)</span></span><br><span class="line">    <span class="comment">#    echo &quot;head=$head, num=$num&quot;</span></span><br><span class="line">    <span class="comment">#    #m[$i]=$(echo $s1 | grep -o [0-9]*)</span></span><br><span class="line">    <span class="comment">#done</span></span><br><span class="line">&#125;</span><br><span class="line">stock_list <span class="string">&quot;<span class="variable">$1</span>&quot;</span> <span class="string">&quot;<span class="variable">$2</span>&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>get 到的知识点</p><ul><li>grep 的练习使用</li><li>awk 的练习使用</li><li>使用 shell 中的 map(这个是看网上的)</li><li>map 对我来说还是有点难的,初次接触</li><li>我不会解决这个问题了,就去网上找 shell 的数据结构</li><li>发现这个 map 符合我的预期就使用了</li><li>这个以后还是要练习练习的</li></ul></blockquote><h2 id="大佬的解决方案"><a href="#大佬的解决方案" class="headerlink" title="大佬的解决方案"></a><a href="https://www.codewars.com/kata/54dc6f5a224c26032800005c/solutions/shell">大佬的解决方案</a></h2><h1 id="希望能对你有所帮助-p-o"><a href="#希望能对你有所帮助-p-o" class="headerlink" title="希望能对你有所帮助(p_o)"></a>希望能对你有所帮助(p_o)</h1>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://www.codewars.com/kata/54dc6f5a224c26032800005c/train/shell&quot;&gt;题目链接&lt;/a&gt;&lt;br&gt;内容介绍&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight text&quot;&gt;&lt;figcaption&gt;&lt;span&gt;内容介绍 &gt;folded&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;A bookseller has lots of books classified in 26 categories labeled A, B, ... Z. Each book has a code c of 3, 4, 5 or more characters. The 1st character of a code is a capital letter which defines the book category.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;In the bookseller&amp;#x27;s stocklist each code c is followed by a space and by a positive integer n (int n &amp;gt;= 0) which indicates the quantity of books of this code in stock.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;For example an extract of a stocklist could be:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;L = &amp;#123;&amp;quot;ABART 20&amp;quot;, &amp;quot;CDXEF 50&amp;quot;, &amp;quot;BKWRK 25&amp;quot;, &amp;quot;BTSQZ 89&amp;quot;, &amp;quot;DRTYM 60&amp;quot;&amp;#125;.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;or&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;L = [&amp;quot;ABART 20&amp;quot;, &amp;quot;CDXEF 50&amp;quot;, &amp;quot;BKWRK 25&amp;quot;, &amp;quot;BTSQZ 89&amp;quot;, &amp;quot;DRTYM 60&amp;quot;] or ....&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;You will be given a stocklist (e.g. : L) and a list of categories in capital letters e.g :&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;M = &amp;#123;&amp;quot;A&amp;quot;, &amp;quot;B&amp;quot;, &amp;quot;C&amp;quot;, &amp;quot;W&amp;quot;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;or&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;M = [&amp;quot;A&amp;quot;, &amp;quot;B&amp;quot;, &amp;quot;C&amp;quot;, &amp;quot;W&amp;quot;] or ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;and your task is to find all the books of L with codes belonging to each category of M and to sum their quantity according to each category.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;For the lists L and M of example you have to return the string (in Haskell/Clojure/Racket a list of pairs):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(A : 20) - (B : 114) - (C : 50) - (W : 0)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;where A, B, C, W are the categories, 20 is the sum of the unique book of category A, 114 the sum corresponding to &amp;quot;BKWRK&amp;quot; and &amp;quot;BTSQZ&amp;quot;, 50 corresponding to &amp;quot;CDXEF&amp;quot; and 0 to category &amp;#x27;W&amp;#x27; since there are no code beginning with W.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;If L or M are empty return string is &amp;quot;&amp;quot; (Clojure and Racket should return an empty array/list instead).&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Note:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;In the result codes and their values are in the same order as in M.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="codewars" scheme="https://zhangpf2000.github.io/categories/codewars/"/>
    
      <category term="shell" scheme="https://zhangpf2000.github.io/categories/codewars/shell/"/>
    
    
      <category term="codewars" scheme="https://zhangpf2000.github.io/tags/codewars/"/>
    
      <category term="shell" scheme="https://zhangpf2000.github.io/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>15_python_返回字符串中部分片段</title>
    <link href="https://zhangpf2000.github.io/2021/04/27/codewars/15_python_%E8%BF%94%E5%9B%9E%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E9%83%A8%E5%88%86%E7%89%87%E6%AE%B5.html/"/>
    <id>https://zhangpf2000.github.io/2021/04/27/codewars/15_python_%E8%BF%94%E5%9B%9E%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E9%83%A8%E5%88%86%E7%89%87%E6%AE%B5.html/</id>
    <published>2021-04-27T10:38:32.000Z</published>
    <updated>2021-04-27T10:43:12.658Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://www.codewars.com/kata/56747fd5cb988479af000028/train/python">题目链接</a><br>内容介绍</p></blockquote><figure class="highlight text"><figcaption><span>>folded</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">You are going to be given a word. Your job is to return the middle character of the word. If the word&#x27;s length is odd, return the middle character. If the word&#x27;s length is even, return the middle 2 characters.</span><br><span class="line"></span><br><span class="line">#Examples:</span><br><span class="line"></span><br><span class="line">Kata.getMiddle(&quot;test&quot;) should return &quot;es&quot;</span><br><span class="line"></span><br><span class="line">Kata.getMiddle(&quot;testing&quot;) should return &quot;t&quot;</span><br><span class="line"></span><br><span class="line">Kata.getMiddle(&quot;middle&quot;) should return &quot;dd&quot;</span><br><span class="line"></span><br><span class="line">Kata.getMiddle(&quot;A&quot;) should return &quot;A&quot;</span><br><span class="line"></span><br><span class="line">#Input</span><br><span class="line"></span><br><span class="line">A word (string) of length 0 &lt; str &lt; 1000 (In javascript you may get slightly more than 1000 in some test cases due to an error in the test cases). You do not need to test for this. This is only here to tell you that you do not need to worry about your solution timing out.</span><br><span class="line"></span><br><span class="line">#Output</span><br><span class="line"></span><br><span class="line">The middle character(s) of the word represented as a string.</span><br></pre></td></tr></table></figure><span id="more"></span><blockquote><p>这个题的意思是<br>如果给的字符串有偶数个字符,则返回中间那俩<br>如果给的字符串有奇数个字符,则返回中间那个<br>代码演示</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_middle</span>(<span class="params">s</span>):</span></span><br><span class="line">    l = <span class="built_in">len</span>(s)</span><br><span class="line">    <span class="keyword">if</span> l % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> s[<span class="built_in">int</span>(l/<span class="number">2</span>)-<span class="number">1</span>:<span class="built_in">int</span>(l/<span class="number">2</span>)+<span class="number">1</span>:<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> s[<span class="built_in">int</span>(l/<span class="number">2</span>)]</span><br></pre></td></tr></table></figure><blockquote><p>我使用的是切片获取中间的字符<br>大佬的解决方案</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_middle</span>(<span class="params">s</span>):</span></span><br><span class="line">   <span class="keyword">return</span> s[(<span class="built_in">len</span>(s)-<span class="number">1</span>)/<span class="number">2</span>:<span class="built_in">len</span>(s)/<span class="number">2</span>+<span class="number">1</span>]</span><br></pre></td></tr></table></figure><h1 id="希望能对你有所帮助-p-o"><a href="#希望能对你有所帮助-p-o" class="headerlink" title="希望能对你有所帮助(p_o)"></a>希望能对你有所帮助(p_o)</h1>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://www.codewars.com/kata/56747fd5cb988479af000028/train/python&quot;&gt;题目链接&lt;/a&gt;&lt;br&gt;内容介绍&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight text&quot;&gt;&lt;figcaption&gt;&lt;span&gt;&gt;folded&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;You are going to be given a word. Your job is to return the middle character of the word. If the word&amp;#x27;s length is odd, return the middle character. If the word&amp;#x27;s length is even, return the middle 2 characters.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#Examples:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Kata.getMiddle(&amp;quot;test&amp;quot;) should return &amp;quot;es&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Kata.getMiddle(&amp;quot;testing&amp;quot;) should return &amp;quot;t&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Kata.getMiddle(&amp;quot;middle&amp;quot;) should return &amp;quot;dd&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Kata.getMiddle(&amp;quot;A&amp;quot;) should return &amp;quot;A&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#Input&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;A word (string) of length 0 &amp;lt; str &amp;lt; 1000 (In javascript you may get slightly more than 1000 in some test cases due to an error in the test cases). You do not need to test for this. This is only here to tell you that you do not need to worry about your solution timing out.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#Output&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;The middle character(s) of the word represented as a string.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="codewars" scheme="https://zhangpf2000.github.io/categories/codewars/"/>
    
      <category term="python" scheme="https://zhangpf2000.github.io/categories/codewars/python/"/>
    
    
      <category term="codewars" scheme="https://zhangpf2000.github.io/tags/codewars/"/>
    
      <category term="python" scheme="https://zhangpf2000.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>14_python_字符串的逆序返回</title>
    <link href="https://zhangpf2000.github.io/2021/04/27/codewars/14_python_%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E9%80%86%E5%BA%8F%E8%BF%94%E5%9B%9E.html/"/>
    <id>https://zhangpf2000.github.io/2021/04/27/codewars/14_python_%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E9%80%86%E5%BA%8F%E8%BF%94%E5%9B%9E.html/</id>
    <published>2021-04-27T09:32:02.000Z</published>
    <updated>2021-04-27T09:38:56.951Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://www.codewars.com/kata/5168bb5dfe9a00b126000018/train/python">题目链接</a><br>内容介绍</p></blockquote><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Complete the solution so that it reverses the string passed into it.</span><br><span class="line"></span><br><span class="line">&#x27;world&#x27;  =&gt;  &#x27;dlrow&#x27;</span><br></pre></td></tr></table></figure><span id="more"></span><blockquote><p>这个题目是给定一个字符串<br>返回这个字符串的逆序<br>我的方法是使用切片<br>代码如下</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solution</span>(<span class="params">string</span>):</span></span><br><span class="line">    <span class="keyword">return</span> string[::-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><blockquote><p>get 到的知识点<br>切片技术<br>切片里面有三个变量</p><ul><li>第一个变量 start_index 是起始索引地址</li><li>第二个变量 end_index 是结束索引地址</li><li>第三个变量 step 是步数,就是间隔是多少</li></ul><p>更多内容请查看<a href="https://www.jianshu.com/p/15715d6f4dad">详细讲解</a></p></blockquote><h1 id="希望能对你有所帮助-p-o"><a href="#希望能对你有所帮助-p-o" class="headerlink" title="希望能对你有所帮助(p_o)"></a>希望能对你有所帮助(p_o)</h1>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://www.codewars.com/kata/5168bb5dfe9a00b126000018/train/python&quot;&gt;题目链接&lt;/a&gt;&lt;br&gt;内容介绍&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight text&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Complete the solution so that it reverses the string passed into it.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#x27;world&amp;#x27;  =&amp;gt;  &amp;#x27;dlrow&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="codewars" scheme="https://zhangpf2000.github.io/categories/codewars/"/>
    
      <category term="python" scheme="https://zhangpf2000.github.io/categories/codewars/python/"/>
    
    
      <category term="codewars" scheme="https://zhangpf2000.github.io/tags/codewars/"/>
    
      <category term="python" scheme="https://zhangpf2000.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>解决debian升级内核后新内核无法启动的问题</title>
    <link href="https://zhangpf2000.github.io/2021/04/27/%E8%A7%A3%E5%86%B3debian%E5%8D%87%E7%BA%A7%E5%86%85%E6%A0%B8%E5%90%8E%E6%96%B0%E5%86%85%E6%A0%B8%E6%97%A0%E6%B3%95%E5%90%AF%E5%8A%A8%E7%9A%84%E9%97%AE%E9%A2%98.html/"/>
    <id>https://zhangpf2000.github.io/2021/04/27/%E8%A7%A3%E5%86%B3debian%E5%8D%87%E7%BA%A7%E5%86%85%E6%A0%B8%E5%90%8E%E6%96%B0%E5%86%85%E6%A0%B8%E6%97%A0%E6%B3%95%E5%90%AF%E5%8A%A8%E7%9A%84%E9%97%AE%E9%A2%98.html/</id>
    <published>2021-04-27T05:13:35.000Z</published>
    <updated>2021-04-27T05:38:22.290Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>我整体的升级了我的 debian10<br>使用了 bullseye 版的源去升级软件和内核<br>升级之后我的内核版本是<br><code>Linux debian 5.10.0-6-amd64 #1 SMP Debian 5.10.28-1 (2021-04-09) x86_64 GNU/Linux</code><br>但是使用这个内核重启系统之后会出现引导错误<br>连桌面都进不去<br>但是其他的内核可以进去<br>我使用的是 5.10.0-5-amd64 内核就可以进入系统<br>可见出现问题的地方是 linux 的内核</p></blockquote><span id="more"></span><h2 id="错误图片"><a href="#错误图片" class="headerlink" title="错误图片"></a>错误图片</h2><p><img src="https://cdn.jsdelivr.net/gh/ZhangPF2000/Image@main/img/20210427132025.jpg" alt=""></p><blockquote><p>解决问题分析问题<br>因为我使用的是 grub2 进行系统引导的<br>在我升级内核之后就更新了我的 grub2 配置文件<br><code>update-grub2</code><br>由于是内核的问题,我就先找 debian 的启动内核<br><code>vmlinuz-5.10.0-5-amd64</code>和<code>initrd.img-5.10.0-5-amd64</code><br>这两个文件是在<code>/boot</code>文件夹下的<br>在<code>/boot/grub/grub.cfg</code>文件中查找时发现了启动错误的地方<br>配置文件如下</p></blockquote><figure class="highlight text"><figcaption><span>grub2错误内核启动的配置</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">menuentry &#x27;Debian GNU/Linux&#x27; --class debian --class gnu-linux --class gnu --class os $menuentry_id_option &#x27;gnulinux-simpl-axxxxxxx--xxxx-xxxx-xxxxxxxxxxx6&#x27; &#123;</span><br><span class="line">load_video</span><br><span class="line">insmod gzio</span><br><span class="line">if [ x$grub_platform = xxen ]; then insmod xzio; insmod lzopio; fi</span><br><span class="line">insmod part_gpt</span><br><span class="line">insmod ext2</span><br><span class="line">set root=&#x27;hd1,gpt2&#x27;</span><br><span class="line">if [ x$feature_platform_search_hint = xy ]; then</span><br><span class="line">  search --no-floppy --fs-uuid --set=root --hint-bios=hd1,gpt2 --hint-efi=hd1,gpt2 --hint-baremetal=ahci1,gpt2  axxxxxxxx--xxxx-xxxx-xxxxxxxxxxx6</span><br><span class="line">else</span><br><span class="line">  search --no-floppy --fs-uuid --set=root axxxxxxxx--xxxx-xxxx-xxxxxxxxxxx6</span><br><span class="line">fi</span><br><span class="line">echo&#x27;Loading Linux 5.10.0-6-amd64 ...&#x27;</span><br><span class="line">linux/boot/vmlinuz-5.10.0-6-amd64 root=/dev/sdb2 ro  quiet</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>仔细对比发现这个 grub2 加载内核出问题了<br>因为 grub2 是通过加载 linux 内核启动系统的<br>但是这个配置文件中却没有新内核的加载<br>与之相对的是旧内核的加载:如下</p></blockquote><figure class="highlight text"><figcaption><span>grub2加载旧内核部分配置文件</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">menuentry &#x27;Debian GNU/Linux, with Linux 5.10.0-5-amd64&#x27; --class debian --class gnu-linux --class gnu --class os $menuentry_id_option &#x27;gnulinux-5.10.0-5-amd64-advanced-axxxxxxxx--xxxx-xxxx-xxxxxxxxxxx6&#x27; &#123;</span><br><span class="line">load_video</span><br><span class="line">insmod gzio</span><br><span class="line">if [ x$grub_platform = xxen ]; then insmod xzio; insmod lzopio; fi</span><br><span class="line">insmod part_gpt</span><br><span class="line">insmod ext2</span><br><span class="line">set root=&#x27;hd1,gpt2&#x27;</span><br><span class="line">if [ x$feature_platform_search_hint = xy ]; then</span><br><span class="line">  search --no-floppy --fs-uuid --set=root --hint-bios=hd1,gpt2 --hint-efi=hd1,gpt2 --hint-baremetal=ahci1,gpt2  axxxxxxxx--xxxx-xxxx-xxxxxxxxxxx6</span><br><span class="line">else</span><br><span class="line">  search --no-floppy --fs-uuid --set=root axxxxxxxx--xxxx-xxxx-xxxxxxxxxxx6</span><br><span class="line">fi</span><br><span class="line">echo&#x27;Loading Linux 5.10.0-5-amd64 ...&#x27;</span><br><span class="line">linux/boot/vmlinuz-5.10.0-5-amd64 root=UUID=axxxxxxxx--xxxx-xxxx-xxxxxxxxxxx6 ro  quiet</span><br><span class="line">echo&#x27;Loading initial ramdisk ...&#x27;</span><br><span class="line">initrd/boot/initrd.img-5.10.0-5-amd64</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这个最后四行中,有两行是加载 linux 内核启动系统的<br>分别是<code>linux /boot/vmlinuz-5.10.0-5-amd64</code><br>和<code>initrd /boot/initrd.img-5.10.0-5-amd64</code><br>查看<code>/boot</code>文件夹下的内容</p></blockquote><figure class="highlight bash"><figcaption><span>boot文件夹下的内容</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">zpf@debian:~/Desktop/Blog$ ls /boot/</span><br><span class="line">config-5.10.0-5-amd64  efi   initrd.img-5.10.0-5-amd64  System.map-5.10.0-5-amd64  vmlinuz-5.10.0-5-amd64 grub</span><br></pre></td></tr></table></figure><blockquote><p>里面竟然没有新内核的文件<br>查看 apt 安装的内容<br>发现已经安装了,这个时候已经知道问题所在了<br>就是升级内核之后,内核丢失,需要重新安装</p></blockquote><h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><blockquote><p>重新安装新内核<br>终端执行下面的命令<br><code>sudo apt reinstall linux-image-5.10.0-6-amd64</code><br>重装之后记得查看<code>/boot</code>文件夹下有没有内核文件<br>这个时候重启即可</p></blockquote><figure class="highlight bash"><figcaption><span>重装之后boot文件夹下的内容</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">zpf@debian:~/Desktop/Blog$ ls /boot/</span><br><span class="line">config-5.10.0-5-amd64  efi   initrd.img-5.10.0-5-amd64  System.map-5.10.0-5-amd64  vmlinuz-5.10.0-5-amd64</span><br><span class="line">config-5.10.0-6-amd64  grub  initrd.img-5.10.0-6-amd64  System.map-5.10.0-6-amd64  vmlinuz-5.10.0-6-amd64</span><br></pre></td></tr></table></figure><h1 id="希望能对你有所帮助-p-o"><a href="#希望能对你有所帮助-p-o" class="headerlink" title="希望能对你有所帮助(p_o)"></a>希望能对你有所帮助(p_o)</h1>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;我整体的升级了我的 debian10&lt;br&gt;使用了 bullseye 版的源去升级软件和内核&lt;br&gt;升级之后我的内核版本是&lt;br&gt;&lt;code&gt;Linux debian 5.10.0-6-amd64 #1 SMP Debian 5.10.28-1 (2021-04-09) x86_64 GNU/Linux&lt;/code&gt;&lt;br&gt;但是使用这个内核重启系统之后会出现引导错误&lt;br&gt;连桌面都进不去&lt;br&gt;但是其他的内核可以进去&lt;br&gt;我使用的是 5.10.0-5-amd64 内核就可以进入系统&lt;br&gt;可见出现问题的地方是 linux 的内核&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="linux" scheme="https://zhangpf2000.github.io/categories/linux/"/>
    
    
      <category term="debian" scheme="https://zhangpf2000.github.io/tags/debian/"/>
    
  </entry>
  
  <entry>
    <title>13_shell_从1加到n并返回</title>
    <link href="https://zhangpf2000.github.io/2021/04/26/codewars/13_shell_%E4%BB%8E1%E5%8A%A0%E5%88%B0n%E5%B9%B6%E8%BF%94%E5%9B%9E.html/"/>
    <id>https://zhangpf2000.github.io/2021/04/26/codewars/13_shell_%E4%BB%8E1%E5%8A%A0%E5%88%B0n%E5%B9%B6%E8%BF%94%E5%9B%9E.html/</id>
    <published>2021-04-26T13:36:07.000Z</published>
    <updated>2021-04-26T13:42:27.347Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://www.codewars.com/kata/55d24f55d7dd296eb9000030/train/shell">题目链接</a><br>内容介绍</p></blockquote><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Summation</span><br><span class="line"></span><br><span class="line">Write a program that finds the summation of every number from 1 to num. The number will always be a positive integer greater than 0.</span><br><span class="line"></span><br><span class="line">For example:</span><br><span class="line"></span><br><span class="line">summation(2) -&gt; 3</span><br><span class="line">1 + 2</span><br><span class="line"></span><br><span class="line">summation(8) -&gt; 36</span><br><span class="line">1 + 2 + 3 + 4 + 5 + 6 + 7 + 8</span><br></pre></td></tr></table></figure><span id="more"></span><blockquote><p>本质上来说<br>这个题还是很简单<br>不过要注意的地方是数字的运算<br>我的代码演示</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">n=$<span class="number">1</span></span><br><span class="line"><span class="meta"># your code here</span></span><br><span class="line">num=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span>((i=<span class="number">1</span>;i&lt;=n;i++))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  ((num+=i));</span><br><span class="line">done</span><br><span class="line">echo $num</span><br></pre></td></tr></table></figure><blockquote><p>注意:数字的运算必须在(())可以直接运算<br>不然是字符串的操作<br>看看大佬的奇妙解题方式</p></blockquote><figure class="highlight cpp"><figcaption><span>大佬的解决方案</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo $(($<span class="number">1</span> * ($<span class="number">1</span> + <span class="number">1</span>) / <span class="number">2</span>))</span><br></pre></td></tr></table></figure><blockquote><p>get 到的知识点<br><a href="https://blog.csdn.net/taiyang1987912/article/details/39551385">在 shell 中相关括号的使用</a></p></blockquote><h1 id="希望能对你有所帮助-p-o"><a href="#希望能对你有所帮助-p-o" class="headerlink" title="希望能对你有所帮助(p_o)"></a>希望能对你有所帮助(p_o)</h1>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://www.codewars.com/kata/55d24f55d7dd296eb9000030/train/shell&quot;&gt;题目链接&lt;/a&gt;&lt;br&gt;内容介绍&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight text&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Summation&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Write a program that finds the summation of every number from 1 to num. The number will always be a positive integer greater than 0.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;For example:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;summation(2) -&amp;gt; 3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1 + 2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;summation(8) -&amp;gt; 36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1 + 2 + 3 + 4 + 5 + 6 + 7 + 8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="codewars" scheme="https://zhangpf2000.github.io/categories/codewars/"/>
    
      <category term="shell" scheme="https://zhangpf2000.github.io/categories/codewars/shell/"/>
    
    
      <category term="codewars" scheme="https://zhangpf2000.github.io/tags/codewars/"/>
    
      <category term="shell" scheme="https://zhangpf2000.github.io/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>12_cpp_返回容器中与其他数不同那个数</title>
    <link href="https://zhangpf2000.github.io/2021/04/25/codewars/12_cpp_%E8%BF%94%E5%9B%9E%E5%AE%B9%E5%99%A8%E4%B8%AD%E4%B8%8E%E5%85%B6%E4%BB%96%E6%95%B0%E4%B8%8D%E5%90%8C%E9%82%A3%E4%B8%AA%E6%95%B0.html/"/>
    <id>https://zhangpf2000.github.io/2021/04/25/codewars/12_cpp_%E8%BF%94%E5%9B%9E%E5%AE%B9%E5%99%A8%E4%B8%AD%E4%B8%8E%E5%85%B6%E4%BB%96%E6%95%B0%E4%B8%8D%E5%90%8C%E9%82%A3%E4%B8%AA%E6%95%B0.html/</id>
    <published>2021-04-25T13:58:05.000Z</published>
    <updated>2021-04-26T13:15:42.231Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://www.codewars.com/kata/5526fc09a1bbd946250002dc/train/cpp">题目链接</a><br>内容介绍</p></blockquote><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">You are given an array (which will have a length of at least 3, but could be very large) containing integers. The array is either entirely comprised of odd integers or entirely comprised of even integers except for a single integer N. Write a method that takes the array as an argument and returns this &quot;outlier&quot; N.</span><br><span class="line">Examples</span><br><span class="line"></span><br><span class="line">[2, 4, 0, 100, 4, 11, 2602, 36]</span><br><span class="line">Should return: 11 (the only odd number)</span><br><span class="line"></span><br><span class="line">[160, 3, 1719, 19, 11, 13, -21]</span><br><span class="line">Should return: 160 (the only even number)</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 大致的意思就是</span><br><span class="line"> * 给你一个容器,</span><br><span class="line"> * 里面全是数字,容器大小最小为3个</span><br><span class="line"> * 里面只有一个奇数或偶数</span><br><span class="line"> * 请找出这个奇数或偶数并返回</span><br><span class="line">*/</span><br></pre></td></tr></table></figure><span id="more"></span><blockquote><p>我的解题思路</p><ul><li>该开始是打算用<code>a[num%2]++</code>得到奇数和偶数的个数</li><li>然后遍历容器中元素当比对上那个要求的数时就返回</li><li>后来不想循环两次就放弃了</li><li>然后打算是用 map 来解决这个问题</li><li>map 是一种映射关系,在 python 中就是字典(<code>键值对</code>)</li><li>所以这样就尤为的方便</li><li>我创建的是<code>std::map&lt;bool, int&gt; m</code></li><li>通过上面的奇数和偶数个数差,再通过 map 的一个 find 函数查找 bool 类型</li><li>即可确定那个不一样的数</li></ul><p>我的解题代码</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">FindOutlier</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; arr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">map</span>&lt;<span class="keyword">bool</span>, <span class="keyword">int</span>&gt; m;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">2</span>] = &#123;<span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> i : arr)</span><br><span class="line">    &#123;</span><br><span class="line">        m.insert(<span class="built_in">std</span>::<span class="built_in">pair</span>&lt;<span class="keyword">bool</span>, <span class="keyword">int</span>&gt;&#123;i % <span class="number">2</span>, i&#125;);</span><br><span class="line">        a[i % <span class="number">2</span>]++;</span><br><span class="line">    &#125;</span><br><span class="line">    result = (a[<span class="number">0</span>] &lt; a[<span class="number">1</span>]) ? m.find(<span class="literal">false</span>)-&gt;second : m.find(<span class="literal">true</span>)-&gt;second;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="大佬的解决方案"><a href="#大佬的解决方案" class="headerlink" title="大佬的解决方案"></a>大佬的解决方案</h2><figure class="highlight cpp"><figcaption><span>大佬的解决方案1</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">FindOutlier</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; arr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> even;</span><br><span class="line">    <span class="keyword">int</span> odd;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> evenCount = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> oddCount = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> a : arr)</span><br><span class="line">        a % <span class="number">2</span> == <span class="number">0</span> ? (evenCount++, even = a) : (oddCount++, odd = a);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> evenCount &lt; oddCount ? even : odd;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><figcaption><span>大佬的解决方案2</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">FindOutlier</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; arr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">bool</span> lsb;</span><br><span class="line">    <span class="keyword">if</span>((lsb = arr[<span class="number">0</span>]&amp;<span class="number">1</span>) == (arr[<span class="number">1</span>]&amp;<span class="number">1</span>))</span><br><span class="line">        <span class="keyword">return</span> *<span class="built_in">std</span>::find_if(arr.begin()+<span class="number">2</span>, arr.end(), [&amp;](<span class="keyword">const</span> <span class="keyword">int</span>&amp; i)&#123; <span class="keyword">return</span> (i&amp;<span class="number">1</span>) != lsb; &#125;);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> (lsb == (arr[<span class="number">2</span>]&amp;<span class="number">1</span>)) ? arr[<span class="number">1</span>] : arr[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>get 到的知识点</p><ul><li>map 的初步使用</li><li>创建 map 键值对<code>std::map&lt;bool,int&gt; m</code></li><li>map 插入一个键值对<code>m.insert(pair&lt;bool,int&gt;(false, 10))</code></li><li>map 的查找操作<code>m.find(false)</code>(注意:这里只是找到了)</li><li>map 找到后访问第一个元素<code>m.find(false)-&gt;first</code>,第二个是<code>m.find(false)-&gt;second</code></li><li>first 是键(Key),second 是值(Value)</li><li><del>出大问题了…………</del></li><li><del>TMD 这个 map 有问题,我忘了,key 只能有一个</del></li><li><del>还有要是测试的数据中有重复的数字的话,那反过来创建的<code>&lt;int,bool&gt;</code>也不行</del></li><li><del>但神奇的是我的代码通过了,好吧,在这里注意下</del></li><li><del>总之我的代码太烂了,但是过了,不管了,map 是个坑</del></li><li><del>是个大坑,在写博客的时候我去运行我修改后的 map 代码</del></li><li><del>真 TM 迷一样的数据结构,太 TM 蒙蔽了</del></li><li>以后好好学学这个 map 吧,键值对还是很有用的</li></ul><hr><ul><li>上面的 map 我搞懂为啥我的那个测试通过了</li><li>准确的说,我那个代码不算是错误的</li><li>确实能实现那个功能</li><li>但是 map 里面只有两个键值对</li><li>一个是<code>&lt;true, num1&gt;</code></li><li>一个是<code>&lt;false, num2&gt;</code></li><li>当里面有多个 true 的时候,在把数据添加到 map 时</li><li>会覆盖里面原来的 true 的值,虽然覆盖了</li><li>但是我们要找的那个是 false,所以返回的内容还是我们要找的那个数据</li></ul></blockquote><h1 id="希望能对你有所帮助-p-o"><a href="#希望能对你有所帮助-p-o" class="headerlink" title="希望能对你有所帮助(p_o)"></a>希望能对你有所帮助(p_o)</h1>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://www.codewars.com/kata/5526fc09a1bbd946250002dc/train/cpp&quot;&gt;题目链接&lt;/a&gt;&lt;br&gt;内容介绍&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight text&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;You are given an array (which will have a length of at least 3, but could be very large) containing integers. The array is either entirely comprised of odd integers or entirely comprised of even integers except for a single integer N. Write a method that takes the array as an argument and returns this &amp;quot;outlier&amp;quot; N.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Examples&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[2, 4, 0, 100, 4, 11, 2602, 36]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Should return: 11 (the only odd number)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[160, 3, 1719, 19, 11, 13, -21]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Should return: 160 (the only even number)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * 大致的意思就是&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * 给你一个容器,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * 里面全是数字,容器大小最小为3个&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * 里面只有一个奇数或偶数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * 请找出这个奇数或偶数并返回&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*/&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="codewars" scheme="https://zhangpf2000.github.io/categories/codewars/"/>
    
      <category term="cpp" scheme="https://zhangpf2000.github.io/categories/codewars/cpp/"/>
    
    
      <category term="codewars" scheme="https://zhangpf2000.github.io/tags/codewars/"/>
    
      <category term="cpp" scheme="https://zhangpf2000.github.io/tags/cpp/"/>
    
  </entry>
  
  <entry>
    <title>11_cpp_判断给定的字符串括号是不是匹配的</title>
    <link href="https://zhangpf2000.github.io/2021/04/25/codewars/11_cpp_%E5%88%A4%E6%96%AD%E7%BB%99%E5%AE%9A%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%8B%AC%E5%8F%B7%E6%98%AF%E4%B8%8D%E6%98%AF%E5%8C%B9%E9%85%8D%E7%9A%84.html/"/>
    <id>https://zhangpf2000.github.io/2021/04/25/codewars/11_cpp_%E5%88%A4%E6%96%AD%E7%BB%99%E5%AE%9A%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%8B%AC%E5%8F%B7%E6%98%AF%E4%B8%8D%E6%98%AF%E5%8C%B9%E9%85%8D%E7%9A%84.html/</id>
    <published>2021-04-25T11:45:36.000Z</published>
    <updated>2021-04-25T12:08:03.445Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://www.codewars.com/kata/5277c8a221e209d3f6000b56/train/cpp">题目链接</a><br>内容介绍</p></blockquote><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Write a function that takes a string of braces, and determines if the order of the braces is valid. It should return true if the string is valid, and false if it&#x27;s invalid.</span><br><span class="line"></span><br><span class="line">This Kata is similar to the Valid Parentheses Kata, but introduces new characters: brackets [], and curly braces &#123;&#125;. Thanks to @arnedag for the idea!</span><br><span class="line"></span><br><span class="line">All input strings will be nonempty, and will only consist of parentheses, brackets and curly braces: ()[]&#123;&#125;.</span><br><span class="line">What is considered Valid?</span><br><span class="line"></span><br><span class="line">A string of braces is considered valid if all braces are matched with the correct brace.</span><br><span class="line">Examples</span><br><span class="line"></span><br><span class="line">&quot;()&#123;&#125;[]&quot;   =&gt;  True</span><br><span class="line">&quot;([&#123;&#125;])&quot;   =&gt;  True</span><br><span class="line">&quot;(&#125;&quot;       =&gt;  False</span><br><span class="line">&quot;[(])&quot;     =&gt;  False</span><br><span class="line">&quot;[(&#123;&#125;)](]&quot; =&gt;  False</span><br></pre></td></tr></table></figure><span id="more"></span><blockquote><p>我的解题思路<br>刚开始是考虑到前段时间学到的栈了<br>使用<code>&lt;stack&gt;</code>头文件去使用栈解决<br>在我的 vscode 上是成功的解决了<br>但是在 codewars 网站上却出现了错误<br>还是内存错误,我在评论区看到和我一样错误的了<br>但是没给答案,好像是用 gdb 调试发现有问题的(我不会)<br>然后去百度,后来发现了一种不错的方法,<br>就是字符串替换,把成对的<code>()``&#123;&#125;``[]</code>换成<code>&#39;&#39;</code><br>这样最后换完之后<br>如果字符串是空的,就返回 true,<br>如果不是空的,就返回 false<br>这样就解救这个问题了<br>我的代码演示</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">valid_braces</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">string</span> braces)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// valid or not valid?</span></span><br><span class="line">    <span class="keyword">if</span> (braces.size() % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">/* code */</span></span><br><span class="line">            <span class="keyword">bool</span> b1 = braces.find(<span class="string">&quot;&#123;&#125;&quot;</span>) &lt; braces.size() / <span class="number">2</span>,</span><br><span class="line">                 b2 = braces.find(<span class="string">&quot;()&quot;</span>) &lt; braces.size() / <span class="number">2</span>,</span><br><span class="line">                 b3 = braces.find(<span class="string">&quot;[]&quot;</span>) &lt; braces.size() / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (b1)</span><br><span class="line">                braces = braces.replace(braces.find(<span class="string">&quot;&#123;&#125;&quot;</span>), <span class="number">2</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (b2)</span><br><span class="line">                braces = braces.replace(braces.find(<span class="string">&quot;()&quot;</span>), <span class="number">2</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (b3)</span><br><span class="line">                braces = braces.replace(braces.find(<span class="string">&quot;[]&quot;</span>), <span class="number">2</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; braces &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">if</span> (braces.empty())</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (!b1 &amp;&amp; !b2 &amp;&amp; !b3)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="大佬的解题思路"><a href="#大佬的解题思路" class="headerlink" title="大佬的解题思路"></a>大佬的解题思路</h2><figure class="highlight cpp"><figcaption><span>大佬的解题思路1</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">valid_braces</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">string</span> braces)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt; <span class="built_in">stack</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">char</span> tok : braces) &#123;</span><br><span class="line">    <span class="keyword">switch</span>(tok) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;(&#x27;</span>:</span><br><span class="line">      <span class="built_in">stack</span>.push_back(<span class="string">&#x27;)&#x27;</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;[&#x27;</span>:</span><br><span class="line">      <span class="built_in">stack</span>.push_back(<span class="string">&#x27;]&#x27;</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;&#123;&#x27;</span>:</span><br><span class="line">      <span class="built_in">stack</span>.push_back(<span class="string">&#x27;&#125;&#x27;</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;&#125;&#x27;</span>: <span class="keyword">case</span> <span class="string">&#x27;]&#x27;</span>: <span class="keyword">case</span> <span class="string">&#x27;)&#x27;</span>:</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">stack</span>.empty() || <span class="built_in">stack</span>.back() != tok)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      <span class="built_in">stack</span>.pop_back();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">stack</span>.empty();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 这个使用的是容器,我也用了</span></span><br><span class="line"><span class="comment"> * 但是还是报了内存错误</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><figcaption><span>大佬的解决思路2</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;regex&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">valid_braces</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="built_in">std</span>::regex <span class="title">r</span> <span class="params">(<span class="string">&quot;\\(\\)|\\[\\]|\\&#123;\\&#125;&quot;</span>)</span></span>;</span><br><span class="line">  <span class="keyword">while</span> (<span class="built_in">std</span>::regex_search(s, r)) s = <span class="built_in">std</span>::regex_replace(s, r, <span class="string">&quot;&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> s.length() == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用正则表达式解决问题</span></span><br><span class="line"><span class="comment"> * nice</span></span><br><span class="line"><span class="comment"> * 把匹配到的替换成空即可</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><blockquote><p>启发:<br>在其他人的解决方案中<br>我也发现了 stack 的使用,但是他们都通过了测试<br>很奇怪,但是他们的也确实找不出错误,<br>可能是我的在某些地方有问题吧<br>get 到的知识点</p><ul><li>了解 string 的替换</li><li>了解 string 的 find 查找函数</li><li>上面那两个还要继续学习,重载很多</li><li>初识 map</li><li>初识 regex</li></ul></blockquote><figure class="highlight cpp"><figcaption><span>string的发现函数 >folded</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">s.find(s1)              <span class="comment">//查找s中第一次出现s1的位置，并返回（包括0）</span></span><br><span class="line">s.rfind(s1)             <span class="comment">//查找s中最后次出现s1的位置，并返回（包括0）</span></span><br><span class="line">s.find_first_of(s1)     <span class="comment">//查找在s1中任意一个字符在s中第一次出现的位置，并返回（包括0）</span></span><br><span class="line">s.find_last_of(s1)      <span class="comment">//查找在s1中任意一个字符在s中最后一次出现的位置，并返回（包括0）</span></span><br><span class="line">s.fin_first_not_of(s1)  <span class="comment">//查找s中第一个不属于s1中的字符的位置，并返回（包括0）</span></span><br><span class="line">s.fin_last_not_of(s1)   <span class="comment">//查找s中最后一个不属于s1中的字符的位置，并返回（包括0）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 官方网站上的内容;https://zh.cppreference.com/w/cpp/header/string</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> size_type <span class="title">find</span><span class="params">(<span class="keyword">const</span> T&amp; t, size_type pos = <span class="number">0</span>)</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">    <span class="title">noexcept</span><span class="params">(<span class="comment">/* 见描述 */</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> size_type <span class="title">find</span><span class="params">(<span class="keyword">const</span> basic_string&amp; str, size_type pos = <span class="number">0</span>)</span> <span class="keyword">const</span> <span class="keyword">noexcept</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> size_type <span class="title">find</span><span class="params">(<span class="keyword">const</span> CharT* s, size_type pos, size_type n)</span> <span class="keyword">const</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> size_type <span class="title">find</span><span class="params">(<span class="keyword">const</span> CharT* s, size_type pos = <span class="number">0</span>)</span> <span class="keyword">const</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> size_type <span class="title">find</span><span class="params">(CharT c, size_type pos = <span class="number">0</span>)</span> <span class="keyword">const</span> <span class="keyword">noexcept</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> size_type <span class="title">rfind</span><span class="params">(<span class="keyword">const</span> T&amp; t, size_type pos = npos)</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">    <span class="title">noexcept</span><span class="params">(<span class="comment">/* 见描述 */</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> size_type <span class="title">rfind</span><span class="params">(<span class="keyword">const</span> basic_string&amp; str,</span></span></span><br><span class="line"><span class="function"><span class="params">                            size_type pos = npos)</span> <span class="keyword">const</span> <span class="keyword">noexcept</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> size_type <span class="title">rfind</span><span class="params">(<span class="keyword">const</span> CharT* s, size_type pos, size_type n)</span> <span class="keyword">const</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> size_type <span class="title">rfind</span><span class="params">(<span class="keyword">const</span> CharT* s, size_type pos = npos)</span> <span class="keyword">const</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> size_type <span class="title">rfind</span><span class="params">(CharT c, size_type pos = npos)</span> <span class="keyword">const</span> <span class="keyword">noexcept</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> size_type <span class="title">find_first_of</span><span class="params">(<span class="keyword">const</span> T&amp; t, size_type pos = <span class="number">0</span>)</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">    <span class="title">noexcept</span><span class="params">(<span class="comment">/* 见描述 */</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> size_type <span class="title">find_first_of</span><span class="params">(<span class="keyword">const</span> basic_string&amp; str,</span></span></span><br><span class="line"><span class="function"><span class="params">                                    size_type pos = <span class="number">0</span>)</span> <span class="keyword">const</span> <span class="keyword">noexcept</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> size_type <span class="title">find_first_of</span><span class="params">(<span class="keyword">const</span> CharT* s, size_type pos, size_type n)</span> <span class="keyword">const</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> size_type <span class="title">find_first_of</span><span class="params">(<span class="keyword">const</span> CharT* s, size_type pos = <span class="number">0</span>)</span> <span class="keyword">const</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> size_type <span class="title">find_first_of</span><span class="params">(CharT c, size_type pos = <span class="number">0</span>)</span> <span class="keyword">const</span> <span class="keyword">noexcept</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> size_type <span class="title">find_last_of</span><span class="params">(<span class="keyword">const</span> T&amp; t, size_type pos = npos)</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">    <span class="title">noexcept</span><span class="params">(<span class="comment">/* 见描述 */</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> size_type <span class="title">find_last_of</span><span class="params">(<span class="keyword">const</span> basic_string&amp; str,</span></span></span><br><span class="line"><span class="function"><span class="params">                                    size_type pos = npos)</span> <span class="keyword">const</span> <span class="keyword">noexcept</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> size_type <span class="title">find_last_of</span><span class="params">(<span class="keyword">const</span> CharT* s, size_type pos, size_type n)</span> <span class="keyword">const</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> size_type <span class="title">find_last_of</span><span class="params">(<span class="keyword">const</span> CharT* s, size_type pos = npos)</span> <span class="keyword">const</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> size_type <span class="title">find_last_of</span><span class="params">(CharT c, size_type pos = npos)</span> <span class="keyword">const</span> <span class="keyword">noexcept</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> size_type <span class="title">find_first_not_of</span><span class="params">(<span class="keyword">const</span> T&amp; t, size_type pos = <span class="number">0</span>)</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">    <span class="title">noexcept</span><span class="params">(<span class="comment">/* 见描述 */</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> size_type <span class="title">find_first_not_of</span><span class="params">(<span class="keyword">const</span> basic_string&amp; str,</span></span></span><br><span class="line"><span class="function"><span class="params">                                        size_type pos = <span class="number">0</span>)</span> <span class="keyword">const</span> <span class="keyword">noexcept</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> size_type <span class="title">find_first_not_of</span><span class="params">(<span class="keyword">const</span> CharT* s,</span></span></span><br><span class="line"><span class="function"><span class="params">                                        size_type pos, size_type n)</span> <span class="keyword">const</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> size_type <span class="title">find_first_not_of</span><span class="params">(<span class="keyword">const</span> CharT* s, size_type pos = <span class="number">0</span>)</span> <span class="keyword">const</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> size_type <span class="title">find_first_not_of</span><span class="params">(CharT c, size_type pos = <span class="number">0</span>)</span> <span class="keyword">const</span> <span class="keyword">noexcept</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> size_type <span class="title">find_last_not_of</span><span class="params">(<span class="keyword">const</span> T&amp; t, size_type pos = npos)</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">    <span class="title">noexcept</span><span class="params">(<span class="comment">/* 见描述 */</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> size_type <span class="title">find_last_not_of</span><span class="params">(<span class="keyword">const</span> basic_string&amp; str,</span></span></span><br><span class="line"><span class="function"><span class="params">                                        size_type pos = npos)</span> <span class="keyword">const</span> <span class="keyword">noexcept</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> size_type <span class="title">find_last_not_of</span><span class="params">(<span class="keyword">const</span> CharT* s, size_type pos, size_type n)</span> <span class="keyword">const</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> size_type <span class="title">find_last_not_of</span><span class="params">(<span class="keyword">const</span> CharT* s, size_type pos = npos)</span> <span class="keyword">const</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> size_type <span class="title">find_last_not_of</span><span class="params">(CharT c, size_type pos = npos)</span> <span class="keyword">const</span> <span class="keyword">noexcept</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><figcaption><span>string的替换 >folded</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">constexpr</span> basic_string&amp; <span class="title">replace</span><span class="params">(size_type pos1, size_type n1, <span class="keyword">const</span> basic_string&amp; str)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> basic_string&amp; <span class="title">replace</span><span class="params">(size_type pos1, size_type n1, <span class="keyword">const</span> basic_string&amp; str, size_type pos2, size_type n2 = npos)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> basic_string&amp; <span class="title">replace</span><span class="params">(size_type pos1, size_type n1, <span class="keyword">const</span> T&amp; t)</span></span>;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> basic_string&amp; <span class="title">replace</span><span class="params">(size_type pos1, size_type n1, <span class="keyword">const</span> T&amp; t, size_type pos2, size_type n2 = npos)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> basic_string&amp; <span class="title">replace</span><span class="params">(size_type pos, size_type n1, <span class="keyword">const</span> CharT* s, size_type n2)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> basic_string&amp; <span class="title">replace</span><span class="params">(size_type pos, size_type n1, <span class="keyword">const</span> CharT* s)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> basic_string&amp; <span class="title">replace</span><span class="params">(size_type pos, size_type n1, size_type n2, CharT c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> basic_string&amp; <span class="title">replace</span><span class="params">(const_iterator i1, const_iterator i2, <span class="keyword">const</span> basic_string&amp; str)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> basic_string&amp; <span class="title">replace</span><span class="params">(const_iterator i1, const_iterator i2, <span class="keyword">const</span> T&amp; t)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> basic_string&amp; <span class="title">replace</span><span class="params">(const_iterator i1, const_iterator i2, <span class="keyword">const</span> CharT* s, size_type n)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> basic_string&amp; <span class="title">replace</span><span class="params">(const_iterator i1, const_iterator i2, <span class="keyword">const</span> CharT* s)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> basic_string&amp; <span class="title">replace</span><span class="params">(const_iterator i1, const_iterator i2, size_type n, CharT c)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">InputIt</span>&gt;</span></span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> basic_string&amp; <span class="title">replace</span><span class="params">(const_iterator i1, const_iterator i2, InputIt j1, InputIt j2)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> basic_string&amp; <span class="title">replace</span><span class="params">(const_iterator, const_iterator, <span class="built_in">initializer_list</span>&lt;CharT&gt;)</span></span>;</span><br></pre></td></tr></table></figure><h1 id="希望能对你有所帮助-p-o"><a href="#希望能对你有所帮助-p-o" class="headerlink" title="希望能对你有所帮助(p_o)"></a>希望能对你有所帮助(p_o)</h1>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://www.codewars.com/kata/5277c8a221e209d3f6000b56/train/cpp&quot;&gt;题目链接&lt;/a&gt;&lt;br&gt;内容介绍&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight text&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Write a function that takes a string of braces, and determines if the order of the braces is valid. It should return true if the string is valid, and false if it&amp;#x27;s invalid.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;This Kata is similar to the Valid Parentheses Kata, but introduces new characters: brackets [], and curly braces &amp;#123;&amp;#125;. Thanks to @arnedag for the idea!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;All input strings will be nonempty, and will only consist of parentheses, brackets and curly braces: ()[]&amp;#123;&amp;#125;.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;What is considered Valid?&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;A string of braces is considered valid if all braces are matched with the correct brace.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Examples&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;quot;()&amp;#123;&amp;#125;[]&amp;quot;   =&amp;gt;  True&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;quot;([&amp;#123;&amp;#125;])&amp;quot;   =&amp;gt;  True&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;quot;(&amp;#125;&amp;quot;       =&amp;gt;  False&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;quot;[(])&amp;quot;     =&amp;gt;  False&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;quot;[(&amp;#123;&amp;#125;)](]&amp;quot; =&amp;gt;  False&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="codewars" scheme="https://zhangpf2000.github.io/categories/codewars/"/>
    
      <category term="cpp" scheme="https://zhangpf2000.github.io/categories/codewars/cpp/"/>
    
    
      <category term="codewars" scheme="https://zhangpf2000.github.io/tags/codewars/"/>
    
      <category term="cpp" scheme="https://zhangpf2000.github.io/tags/cpp/"/>
    
  </entry>
  
  <entry>
    <title>10_cpp_字符串的简单加密和解密</title>
    <link href="https://zhangpf2000.github.io/2021/04/25/codewars/10_cpp_%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E7%AE%80%E5%8D%95%E5%8A%A0%E5%AF%86%E5%92%8C%E8%A7%A3%E5%AF%86.html/"/>
    <id>https://zhangpf2000.github.io/2021/04/25/codewars/10_cpp_%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E7%AE%80%E5%8D%95%E5%8A%A0%E5%AF%86%E5%92%8C%E8%A7%A3%E5%AF%86.html/</id>
    <published>2021-04-25T09:06:25.000Z</published>
    <updated>2021-04-25T09:25:53.292Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://www.codewars.com/kata/57814d79a56c88e3e0000786/train/cpp">题目链接</a><br>内容介绍</p></blockquote><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">For building the encrypted string:</span><br><span class="line">Take every 2nd char from the string, then the other chars, that are not every 2nd char, and concat them as new String.</span><br><span class="line">Do this n times!</span><br><span class="line"></span><br><span class="line">Examples:</span><br><span class="line"></span><br><span class="line">&quot;This is a test!&quot;, 1 -&gt; &quot;hsi  etTi sats!&quot;</span><br><span class="line">&quot;This is a test!&quot;, 2 -&gt; &quot;hsi  etTi sats!&quot; -&gt; &quot;s eT ashi tist!&quot;</span><br><span class="line"></span><br><span class="line">Write two methods:</span><br><span class="line"></span><br><span class="line">std::string encrypt(std::string text, int n)</span><br><span class="line">std::string decrypt(std::string encryptedText, int n)</span><br><span class="line"></span><br><span class="line">For both methods:</span><br><span class="line">If the input-string is null or empty return exactly this value!</span><br><span class="line">If n is &lt;= 0 then return the input text.</span><br><span class="line"></span><br><span class="line">This kata is part of the Simple Encryption Series:</span><br><span class="line">Simple Encryption #1 - Alternating Split</span><br><span class="line">Simple Encryption #2 - Index-Difference</span><br><span class="line">Simple Encryption #3 - Turn The Bits Around</span><br><span class="line">Simple Encryption #4 - Qwerty</span><br><span class="line"></span><br><span class="line">Have fun coding it and please don&#x27;t forget to vote and rank this kata! :-)</span><br></pre></td></tr></table></figure><span id="more"></span><blockquote><p>经分析<br>这个加密和解密是简单越过一个单词后进行组装的<br>多次循环即可加密<br>再加密的时候要注意原字符串的长度是奇数还是偶数<br>不然会导致加密的时候出错<br>解密的时候,忘了<br>解题代码如下</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="function"><span class="built_in">std</span>::<span class="built_in">string</span> <span class="title">encrypt</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">string</span> text, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">0</span> || text.size() == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> text;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> str = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">int</span> length = (text.size() % <span class="number">2</span> == <span class="number">0</span>) ? text.size() + <span class="number">1</span> : text.size();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/* code */</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; text.size(); j++)</span><br><span class="line">        &#123;</span><br><span class="line">            str += text[(<span class="number">2</span> * (j + <span class="number">1</span>) - <span class="number">1</span>) % length];</span><br><span class="line">        &#125;</span><br><span class="line">        text = str;</span><br><span class="line">        str = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> text;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">std</span>::<span class="built_in">string</span> <span class="title">decrypt</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">string</span> encryptedText, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">0</span> || encryptedText.size() == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> encryptedText;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> str = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">int</span> length = encryptedText.size();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/* code */</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; length; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">/* code */</span></span><br><span class="line">            str += encryptedText[(j % <span class="number">2</span> == <span class="number">0</span>) ? (j / <span class="number">2</span>) + (length / <span class="number">2</span>) : (j - <span class="number">1</span>) / <span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        encryptedText = str;</span><br><span class="line">        str = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> encryptedText;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="大佬的解决方案"><a href="#大佬的解决方案" class="headerlink" title="大佬的解决方案"></a>大佬的解决方案</h2><figure class="highlight cpp"><figcaption><span>大佬的解决方案</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">bool</span> forward&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">static</span> <span class="built_in">std</span>::<span class="built_in">string</span> <span class="title">transform</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">string</span> text)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> n = text.length(), k = <span class="number">0</span>;</span><br><span class="line">  <span class="function"><span class="built_in">std</span>::<span class="built_in">string</span> <span class="title">s</span><span class="params">(n, <span class="string">&#x27; &#x27;</span>)</span></span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> p = <span class="number">1</span>; p &gt;= <span class="number">0</span>; --p)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = p; j &lt; n; j += <span class="number">2</span>)</span><br><span class="line">      <span class="keyword">if</span> (forward) s[k++] = text[j]; <span class="keyword">else</span> s[j] = text[k++];</span><br><span class="line">  <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">std</span>::<span class="built_in">string</span> <span class="title">encrypt</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">string</span> text, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) text = transform&lt;<span class="literal">true</span>&gt;(text);</span><br><span class="line">  <span class="keyword">return</span> text;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">std</span>::<span class="built_in">string</span> <span class="title">decrypt</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">string</span> text, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) text = transform&lt;<span class="literal">false</span>&gt;(text);</span><br><span class="line">  <span class="keyword">return</span> text;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 太强了</span></span><br><span class="line"><span class="comment"> * 这个使用模板进行操作</span></span><br><span class="line"><span class="comment"> * 节省了内存空间</span></span><br><span class="line"><span class="comment"> * 也简单直白</span></span><br><span class="line"><span class="comment"> * 模板中的双层循环</span></span><br><span class="line"><span class="comment"> * 就是分别操作字符串中的奇数位和偶数位</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><blockquote><p>大佬的解决方案中还有就是常见的递归<br>我本来也想使用递归的,分析的时候有难度<br>就使用了 for 循环进行解决,使用 for 循环更容易的了解运行过程<br>学到的知识点</p><ul><li>要仔细分析运行过程</li><li>初始化 string 字符串的方式</li><li>std::string(n, ‘ ‘);创建长度为 n 的字符串,里面的值为空格</li></ul></blockquote><h1 id="希望能对你有所帮助-p-o"><a href="#希望能对你有所帮助-p-o" class="headerlink" title="希望能对你有所帮助(p_o)"></a>希望能对你有所帮助(p_o)</h1>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://www.codewars.com/kata/57814d79a56c88e3e0000786/train/cpp&quot;&gt;题目链接&lt;/a&gt;&lt;br&gt;内容介绍&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight text&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;For building the encrypted string:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Take every 2nd char from the string, then the other chars, that are not every 2nd char, and concat them as new String.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Do this n times!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Examples:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;quot;This is a test!&amp;quot;, 1 -&amp;gt; &amp;quot;hsi  etTi sats!&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;quot;This is a test!&amp;quot;, 2 -&amp;gt; &amp;quot;hsi  etTi sats!&amp;quot; -&amp;gt; &amp;quot;s eT ashi tist!&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Write two methods:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;std::string encrypt(std::string text, int n)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;std::string decrypt(std::string encryptedText, int n)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;For both methods:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;If the input-string is null or empty return exactly this value!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;If n is &amp;lt;= 0 then return the input text.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;This kata is part of the Simple Encryption Series:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Simple Encryption #1 - Alternating Split&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Simple Encryption #2 - Index-Difference&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Simple Encryption #3 - Turn The Bits Around&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Simple Encryption #4 - Qwerty&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Have fun coding it and please don&amp;#x27;t forget to vote and rank this kata! :-)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="codewars" scheme="https://zhangpf2000.github.io/categories/codewars/"/>
    
      <category term="cpp" scheme="https://zhangpf2000.github.io/categories/codewars/cpp/"/>
    
    
      <category term="codewars" scheme="https://zhangpf2000.github.io/tags/codewars/"/>
    
      <category term="cpp" scheme="https://zhangpf2000.github.io/tags/cpp/"/>
    
  </entry>
  
  <entry>
    <title>09_cpp_返回两个字符串中所有出现的字符组成的字符串</title>
    <link href="https://zhangpf2000.github.io/2021/04/25/codewars/09_cpp_%E8%BF%94%E5%9B%9E%E4%B8%A4%E4%B8%AA%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E6%89%80%E6%9C%89%E5%87%BA%E7%8E%B0%E7%9A%84%E5%AD%97%E7%AC%A6%E7%BB%84%E6%88%90%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2.html/"/>
    <id>https://zhangpf2000.github.io/2021/04/25/codewars/09_cpp_%E8%BF%94%E5%9B%9E%E4%B8%A4%E4%B8%AA%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E6%89%80%E6%9C%89%E5%87%BA%E7%8E%B0%E7%9A%84%E5%AD%97%E7%AC%A6%E7%BB%84%E6%88%90%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2.html/</id>
    <published>2021-04-25T05:17:06.000Z</published>
    <updated>2021-04-25T05:29:53.224Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://www.codewars.com/kata/5656b6906de340bd1b0000ac/train/cpp">题目链接</a><br>内容介绍</p></blockquote><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Take 2 strings s1 and s2 including only letters from ato z. Return a new sorted string, the longest possible, containing distinct letters - each taken only once - coming from s1 or s2.</span><br><span class="line">Examples:</span><br><span class="line"></span><br><span class="line">a = &quot;xyaabbbccccdefww&quot;</span><br><span class="line">b = &quot;xxxxyyyyabklmopq&quot;</span><br><span class="line">longest(a, b) -&gt; &quot;abcdefklmopqwxy&quot;</span><br><span class="line"></span><br><span class="line">a = &quot;abcdefghijklmnopqrstuvwxyz&quot;</span><br><span class="line">longest(a, a) -&gt; &quot;abcdefghijklmnopqrstuvwxyz&quot;</span><br></pre></td></tr></table></figure><span id="more"></span><blockquote><p>我的解题思路</p><ul><li>创建一个数组<code>int arr[128]</code></li><li>把出现的字符都添加到里面<code>arr[char]++</code></li><li>最后遍历 arr 数组,大于 1 的都是出现过的</li><li>然后就可以得到出现过字符的 ascii 码,返回即可</li></ul><p>代码演示</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;limits&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TwoToOne</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="built_in">std</span>::<span class="built_in">string</span> <span class="title">longest</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp;s1, <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp;s2)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">std</span>::<span class="built_in">string</span> <span class="title">TwoToOne::longest</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp;s1, <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp;s2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> arr[<span class="built_in">std</span>::numeric_limits&lt;<span class="keyword">char</span>&gt;::max()] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> str = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> i : s1)</span><br><span class="line">    &#123;</span><br><span class="line">        arr[i]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> i : s2)</span><br><span class="line">    &#123;</span><br><span class="line">        arr[i]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; <span class="built_in">std</span>::numeric_limits&lt;<span class="keyword">char</span>&gt;::max(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/* code */</span></span><br><span class="line">        <span class="keyword">if</span> (arr[i] &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            str += i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="大佬的解题方案"><a href="#大佬的解题方案" class="headerlink" title="大佬的解题方案"></a>大佬的解题方案</h2><figure class="highlight cpp"><figcaption><span>大佬的解题方案1</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TwoToOne</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="built_in">std</span>::<span class="built_in">string</span> <span class="title">longest</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp;s1, <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp;s2)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">set</span>&lt;<span class="keyword">char</span>&gt; se;</span><br><span class="line">        se.insert(s1.begin(),s1.end());</span><br><span class="line">        se.insert(s2.begin(),s2.end());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">std</span>::<span class="built_in">string</span>(se.begin(),se.end());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 这个解决方案是使用set容器</span></span><br><span class="line"><span class="comment"> * 这个容器最大的特点就是是一个集合</span></span><br><span class="line"><span class="comment"> * 但是里面的元素是唯一的</span></span><br><span class="line"><span class="comment"> * 这样就确保了不会重复</span></span><br><span class="line"><span class="comment"> * 好像这个最后是可以自动排序的,</span></span><br><span class="line"><span class="comment"> * 很棒的思路,不用考虑其他的内容</span></span><br><span class="line"><span class="comment"> * 两次添加字符串即可解决字符重复的问题</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><figcaption><span>大佬的解决方案2</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TwoToOne</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="built_in">std</span>::<span class="built_in">string</span> <span class="title">longest</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp;s1, <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp;s2)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="built_in">std</span>::<span class="built_in">string</span> concat = s1 + s2;</span><br><span class="line">      <span class="built_in">std</span>::sort(concat.begin(), concat.end());</span><br><span class="line">      <span class="keyword">auto</span> end = <span class="built_in">std</span>::unique(concat.begin(), concat.end());</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">std</span>::<span class="built_in">string</span>(concat.begin(), end);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 这个的思路是先合并成一个字符串</span></span><br><span class="line"><span class="comment"> * 然后排序该字符串</span></span><br><span class="line"><span class="comment"> * 然后去重</span></span><br><span class="line"><span class="comment"> * 也很不错,使用的是std::unique()</span></span><br><span class="line"><span class="comment"> * 这个函数是在算法头文件中&lt;algorithm&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><blockquote><p>学到的知识点</p><ul><li>初识 set 容器</li><li>set 的插入 insert,可以插入范围</li><li>联想其他容器 vector 之类的也可以进行范围性插入</li><li>std::unique();去重函数</li></ul></blockquote><h1 id="希望能对你有所帮助-p-o"><a href="#希望能对你有所帮助-p-o" class="headerlink" title="希望能对你有所帮助(p_o)"></a>希望能对你有所帮助(p_o)</h1>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://www.codewars.com/kata/5656b6906de340bd1b0000ac/train/cpp&quot;&gt;题目链接&lt;/a&gt;&lt;br&gt;内容介绍&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight text&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Take 2 strings s1 and s2 including only letters from ato z. Return a new sorted string, the longest possible, containing distinct letters - each taken only once - coming from s1 or s2.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Examples:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a = &amp;quot;xyaabbbccccdefww&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;b = &amp;quot;xxxxyyyyabklmopq&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;longest(a, b) -&amp;gt; &amp;quot;abcdefklmopqwxy&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a = &amp;quot;abcdefghijklmnopqrstuvwxyz&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;longest(a, a) -&amp;gt; &amp;quot;abcdefghijklmnopqrstuvwxyz&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="codewars" scheme="https://zhangpf2000.github.io/categories/codewars/"/>
    
      <category term="cpp" scheme="https://zhangpf2000.github.io/categories/codewars/cpp/"/>
    
    
      <category term="codewars" scheme="https://zhangpf2000.github.io/tags/codewars/"/>
    
      <category term="cpp" scheme="https://zhangpf2000.github.io/tags/cpp/"/>
    
  </entry>
  
  <entry>
    <title>08_cpp_银行汇率问题</title>
    <link href="https://zhangpf2000.github.io/2021/04/25/codewars/08_cpp_%E9%93%B6%E8%A1%8C%E6%B1%87%E7%8E%87%E9%97%AE%E9%A2%98.html/"/>
    <id>https://zhangpf2000.github.io/2021/04/25/codewars/08_cpp_%E9%93%B6%E8%A1%8C%E6%B1%87%E7%8E%87%E9%97%AE%E9%A2%98.html/</id>
    <published>2021-04-25T04:51:03.000Z</published>
    <updated>2021-04-25T04:53:21.463Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://www.codewars.com/kata/563b662a59afc2b5120000c6/train/cpp">题目链接</a><br>内容介绍</p></blockquote><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">In a small town the population is p0 = 1000 at the beginning of a year. The population regularly increases by 2 percent per year and moreover 50 new inhabitants per year come to live in the town. How many years does the town need to see its population greater or equal to p = 1200 inhabitants?</span><br><span class="line"></span><br><span class="line">At the end of the first year there will be:</span><br><span class="line">1000 + 1000 * 0.02 + 50 =&gt; 1070 inhabitants</span><br><span class="line"></span><br><span class="line">At the end of the 2nd year there will be:</span><br><span class="line">1070 + 1070 * 0.02 + 50 =&gt; 1141 inhabitants (** number of inhabitants is an integer **)</span><br><span class="line"></span><br><span class="line">At the end of the 3rd year there will be:</span><br><span class="line">1141 + 1141 * 0.02 + 50 =&gt; 1213</span><br><span class="line"></span><br><span class="line">It will need 3 entire years.</span><br><span class="line"></span><br><span class="line">More generally given parameters:</span><br><span class="line"></span><br><span class="line">p0, percent, aug (inhabitants coming or leaving each year), p (population to surpass)</span><br><span class="line"></span><br><span class="line">the function nb_year should return n number of entire years needed to get a population greater or equal to p.</span><br><span class="line"></span><br><span class="line">aug is an integer, percent a positive or null floating number, p0 and p are positive integers (&gt; 0)</span><br><span class="line"></span><br><span class="line">Examples:</span><br><span class="line">nb_year(1500, 5, 100, 5000) -&gt; 15</span><br><span class="line">nb_year(1500000, 2.5, 10000, 2000000) -&gt; 10</span><br><span class="line"></span><br><span class="line">Note:</span><br><span class="line"></span><br><span class="line">Don&#x27;t forget to convert the percent parameter as a percentage in the body of your function: if the parameter percent is 2 you have to convert it to 0.02.</span><br></pre></td></tr></table></figure><blockquote><p>我的解题思路<br>循环解决<br>代码演示</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Arge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">nbYear</span><span class="params">(<span class="keyword">int</span> p0, <span class="keyword">double</span> percent, <span class="keyword">int</span> aug, <span class="keyword">int</span> p)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Arge::nbYear</span><span class="params">(<span class="keyword">int</span> p0, <span class="keyword">double</span> percent, <span class="keyword">int</span> aug, <span class="keyword">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(p0 &gt;= p)</span><br><span class="line">        &#123;</span><br><span class="line">            p0 = p0 + p0 * percent / <span class="number">100</span> + aug;</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="希望能对你有所帮助-p-o"><a href="#希望能对你有所帮助-p-o" class="headerlink" title="希望能对你有所帮助(p_o)"></a>希望能对你有所帮助(p_o)</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://www.codewars.com/kata/563b662a59afc2b5120000c6/train/cpp&quot;&gt;题目链接&lt;/a&gt;&lt;br&gt;内容介绍&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=
      
    
    </summary>
    
    
      <category term="codewars" scheme="https://zhangpf2000.github.io/categories/codewars/"/>
    
      <category term="cpp" scheme="https://zhangpf2000.github.io/categories/codewars/cpp/"/>
    
    
      <category term="codewars" scheme="https://zhangpf2000.github.io/tags/codewars/"/>
    
      <category term="cpp" scheme="https://zhangpf2000.github.io/tags/cpp/"/>
    
  </entry>
  
  <entry>
    <title>07_cpp_重新排列数字返回尽可能大的数字</title>
    <link href="https://zhangpf2000.github.io/2021/04/25/codewars/07_cpp_%E9%87%8D%E6%96%B0%E6%8E%92%E5%88%97%E6%95%B0%E5%AD%97%E8%BF%94%E5%9B%9E%E5%B0%BD%E5%8F%AF%E8%83%BD%E5%A4%A7%E7%9A%84%E6%95%B0%E5%AD%97.html/"/>
    <id>https://zhangpf2000.github.io/2021/04/25/codewars/07_cpp_%E9%87%8D%E6%96%B0%E6%8E%92%E5%88%97%E6%95%B0%E5%AD%97%E8%BF%94%E5%9B%9E%E5%B0%BD%E5%8F%AF%E8%83%BD%E5%A4%A7%E7%9A%84%E6%95%B0%E5%AD%97.html/</id>
    <published>2021-04-25T04:21:29.000Z</published>
    <updated>2021-04-25T04:38:58.160Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://www.codewars.com/kata/5467e4d82edf8bbf40000155/train/cpp">题目链接</a><br>内容介绍</p></blockquote><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Your task is to make a function that can take any non-negative integer as an argument and return it with its digits in descending order. Essentially, rearrange the digits to create the highest possible number.</span><br><span class="line">Examples:</span><br><span class="line"></span><br><span class="line">Input: 42145 Output: 54421</span><br><span class="line"></span><br><span class="line">Input: 145263 Output: 654321</span><br><span class="line"></span><br><span class="line">Input: 123456789 Output: 987654321</span><br></pre></td></tr></table></figure><span id="more"></span><blockquote><p>我的解题思路</p><ul><li>把给的数字拆分成单个数字放入到容器中</li><li>对容器排序</li><li>逆向迭代器输出得到最大值</li><li>返回最大值</li></ul><p>代码如下</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这个头文件提供了`uint64_t`这个数据类型</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cinttypes&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">uint64_t</span> <span class="title">descendingOrder</span><span class="params">(<span class="keyword">uint64_t</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line">    <span class="keyword">uint64_t</span> max = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; a != <span class="number">0</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        v.push_back(a % <span class="number">10</span>);</span><br><span class="line">        a = a / <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(v.begin(), v.end());</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::reverse_iterator i = v.rbegin(); i != v.rend(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        max = max * <span class="number">10</span> + *i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="大佬的解决方案"><a href="#大佬的解决方案" class="headerlink" title="大佬的解决方案"></a>大佬的解决方案</h2><figure class="highlight cpp"><figcaption><span>大佬的解决方案1</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cinttypes&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">uint64_t</span> <span class="title">descendingOrder</span><span class="params">(<span class="keyword">uint64_t</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">string</span> s = <span class="built_in">std</span>::to_string(a);</span><br><span class="line">  <span class="built_in">std</span>::sort(s.rbegin(), s.rend());</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">std</span>::stoull(s);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 这份代码很简洁</span></span><br><span class="line"><span class="comment"> * 使用的方法是把数字直接通过std:to_string转换成string类型</span></span><br><span class="line"><span class="comment"> * 然后使用std::sort进行排序</span></span><br><span class="line"><span class="comment"> * 最后通过std::stoull进行输出返回</span></span><br><span class="line"><span class="comment"> * 这个stoull是string头文件中的</span></span><br><span class="line"><span class="comment"> * 就是把字符串转换成数字用的,还有其他的一些函数也是这样的</span></span><br><span class="line"><span class="comment"> * 只是返回值(数字)的类型不一样</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><figcaption><span>大佬的解决方案2</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cinttypes&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">uint64_t</span> <span class="title">descendingOrder</span><span class="params">(<span class="keyword">uint64_t</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; c ;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">uint64_t</span> b = a ; b &gt; <span class="number">0</span> ; b /=<span class="number">10</span>)</span><br><span class="line">    c.push_back(b % <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i &lt; c.size() ; i++)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=i; j &lt; c.size() ; j++)</span><br><span class="line">      <span class="keyword">if</span>(c[i] &lt; c[j])</span><br><span class="line">        <span class="built_in">std</span>::swap(c[i],c[j]);</span><br><span class="line">  a=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i &lt; c.size() ;i++)</span><br><span class="line">    a = a*<span class="number">10</span> + c[i];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 这份代码中</span></span><br><span class="line"><span class="comment"> * 值的学习的是那个std::swap()函数</span></span><br><span class="line"><span class="comment"> * 交换函数还是很常用的,这个要记住对于容器来说</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><blockquote><p>学到的知识点<br>逆向迭代器的方法可以使用<code>vector&lt;int&gt;::reverse_iterator</code>的方法<br>sort 排序是在<code>&lt;algorithm&gt;</code>头文件中的,要注意<br>sort 排序的还可以自定义排序方式<br>std::sort(v1, v2, func);<br>通过编写 func 函数进行排序,排序规则是根据 func 函数进行的<br>sort 排序之后,默认是从小到大的<br>可以使用<code>std::reverse()</code>进行逆向再排序</p></blockquote><h1 id="希望能对你有所帮助-p-o"><a href="#希望能对你有所帮助-p-o" class="headerlink" title="希望能对你有所帮助(p_o)"></a>希望能对你有所帮助(p_o)</h1>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://www.codewars.com/kata/5467e4d82edf8bbf40000155/train/cpp&quot;&gt;题目链接&lt;/a&gt;&lt;br&gt;内容介绍&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight text&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Your task is to make a function that can take any non-negative integer as an argument and return it with its digits in descending order. Essentially, rearrange the digits to create the highest possible number.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Examples:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Input: 42145 Output: 54421&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Input: 145263 Output: 654321&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Input: 123456789 Output: 987654321&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="codewars" scheme="https://zhangpf2000.github.io/categories/codewars/"/>
    
      <category term="cpp" scheme="https://zhangpf2000.github.io/categories/codewars/cpp/"/>
    
    
      <category term="codewars" scheme="https://zhangpf2000.github.io/tags/codewars/"/>
    
      <category term="cpp" scheme="https://zhangpf2000.github.io/tags/cpp/"/>
    
  </entry>
  
  <entry>
    <title>06_cpp_返回容器中连续数字的最大值</title>
    <link href="https://zhangpf2000.github.io/2021/04/24/codewars/06_cpp_%E8%BF%94%E5%9B%9E%E5%AE%B9%E5%99%A8%E4%B8%AD%E8%BF%9E%E7%BB%AD%E6%95%B0%E5%AD%97%E7%9A%84%E6%9C%80%E5%A4%A7%E5%80%BC.html/"/>
    <id>https://zhangpf2000.github.io/2021/04/24/codewars/06_cpp_%E8%BF%94%E5%9B%9E%E5%AE%B9%E5%99%A8%E4%B8%AD%E8%BF%9E%E7%BB%AD%E6%95%B0%E5%AD%97%E7%9A%84%E6%9C%80%E5%A4%A7%E5%80%BC.html/</id>
    <published>2021-04-24T13:51:51.000Z</published>
    <updated>2021-04-24T14:25:51.168Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://www.codewars.com/kata/54521e9ec8e60bc4de000d6c/train/cpp">题目链接</a><br>内容介绍</p></blockquote><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">The maximum sum subarray problem consists in finding the maximum sum of a contiguous subsequence in an array or list of integers:</span><br><span class="line"></span><br><span class="line">maxSequence(&#123;-2, 1, -3, 4, -1, 2, 1, -5, 4&#125;);</span><br><span class="line">//should be 6: &#123;4, -1, 2, 1&#125;</span><br><span class="line"></span><br><span class="line">Easy case is when the list is made up of only positive numbers and the maximum sum is the sum of the whole array. If the list is made up of only negative numbers, return 0 instead.</span><br><span class="line"></span><br><span class="line">Empty list is considered to have zero greatest sum. Note that the empty list or array is also a valid sublist/subarray.</span><br></pre></td></tr></table></figure><blockquote><p>题目的大致意思就是,给你一个容器,里面是 int 型变量<br>写一个函数,返回一个最大值,<br>这个最大值是容器里面连续片段求和的最大值</p></blockquote><span id="more"></span><blockquote><p>我的解题思路<br>刚开始的时候,想法出错了,搞了一半写不出来了<br>然后我就选择了最笨的方法,遍历所有的连续的容器片段之和<br>然后返回我的最大值,虽然方法笨但是还能写出来<br>我的代码片段</p></blockquote><figure class="highlight cpp"><figcaption><span>解题代码 >folded</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxSequence</span><span class="params">(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; arr)</span></span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; result;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">0</span>, max = <span class="number">0</span>, ni = <span class="number">0</span>, nj = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> i : arr)</span><br><span class="line">    &#123;</span><br><span class="line">        num = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> j : arr)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (ni &lt; nj)</span><br><span class="line">            &#123;</span><br><span class="line">                num = j + num;</span><br><span class="line">                result.push_back(num);</span><br><span class="line">            &#125;</span><br><span class="line">            nj++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(max &lt; *(max_element(result.cbegin(), result.cend())))</span><br><span class="line">        &#123;</span><br><span class="line">            max = *(max_element(result.cbegin(), result.cend()));</span><br><span class="line">        &#125;</span><br><span class="line">        result.clear();</span><br><span class="line">        ni++;</span><br><span class="line">        num = <span class="number">0</span>;</span><br><span class="line">        nj = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>我的代码还是有改进的地方<br>这个函数传入的参数类型是<code>const vector&lt;int&gt; &amp;arr</code><br>带有 const 在刚开始我写的时候,用的是<code>vector&lt;int&gt;::iterator i = arr.begin</code><br>但是会报错,那时候没反应过来,该用了<code>for(auto i : arr)</code><br>但是临时变量就多了,而且二次循环的时候比较有问题,<br>当我提交之后,看到了<code>*max_element(result.cbegin(), result.cend())</code><br>里面的<code>cbegin()</code>、<code>cend()</code>和<code>begin()</code>、<code>end()</code>有区别<br>我去百度了一下,发现<code>cbegin()</code>和<code>cend()</code>是适用于<code>vector&lt;int&gt;::const_iterator i = arr.begin();</code><br>发现没有报错<br>1.iterator,const_iterator 作用：遍历容器内的元素，并访问这些元素的值。iterator 可以改元素值,但 const_iterator 不可改。跟 C 的指针有点像。<br>2.const_iterator 对象可以用于 const vector 或非 const vector,它自身的值可以改(可以指向其他元素),但不能改写其指向的元素值。<br>3.cbegin()和 cend()是 C++11 新增的，它们返回一个 const 的迭代器，不能用于修改元素。<br><a href="https://blog.csdn.net/u010987458/article/details/70949112">原文链接</a><br>又 get 到一个知识点<br>下面的代码是我优化后的方案</p></blockquote><figure class="highlight cpp"><figcaption><span>优化方案</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxSequence</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; arr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; result;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">0</span>, max = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::const_iterator i = arr.cbegin(); i != arr.cend(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        num = *i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::const_iterator j = i + <span class="number">1</span>; j != arr.cend(); j++)</span><br><span class="line">        &#123;</span><br><span class="line">            num = *j + num;</span><br><span class="line">            result.push_back(num);</span><br><span class="line">        &#125;</span><br><span class="line">        num = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (max &lt; *<span class="built_in">std</span>::max_element(result.cbegin(), result.cend()))</span><br><span class="line">        &#123;</span><br><span class="line">            max = *<span class="built_in">std</span>::max_element(result.cbegin(), result.cend());</span><br><span class="line">        &#125;</span><br><span class="line">        result.clear();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;max == &quot;</span> &lt;&lt; max &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>代码优化之后就不臃肿了<br>运行的效率也提高了不少<br>优化后的运行时间<code>2720</code>:优化前的运行时间<code>2986</code>[注释:是网站上显示的时间]</p></blockquote><h2 id="大佬的方案"><a href="#大佬的方案" class="headerlink" title="大佬的方案"></a>大佬的方案</h2><figure class="highlight cpp"><figcaption><span>大佬的方案1</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxSequence</span><span class="params">(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; arr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>, maxsum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (arr.size() == <span class="number">0</span>)&#123;<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> x: arr)</span><br><span class="line">    &#123;</span><br><span class="line">        sum = max(sum+x,<span class="number">0</span>);</span><br><span class="line">        maxsum = max(maxsum,sum);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxsum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><figcaption><span>大佬的方案2</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxSequence</span><span class="params">(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; arr)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> localmax=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span> globalmax=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;arr.size();i++)</span><br><span class="line">  &#123;</span><br><span class="line">    localmax = localmax + arr[i];</span><br><span class="line">    <span class="keyword">if</span> (localmax &gt; globalmax)</span><br><span class="line">      globalmax = localmax;</span><br><span class="line">    <span class="keyword">if</span> (localmax &lt; <span class="number">0</span>)</span><br><span class="line">      localmax = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> globalmax;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>大佬的方案就是简洁<br>学到的知识点</p><ul><li>交替遍历数据</li><li>cbegin()和 cend()</li><li>求容器的最大值:*std::max_element(result.cbegin(), result.cend());</li></ul></blockquote><h1 id="希望能对你有所帮助-p-o"><a href="#希望能对你有所帮助-p-o" class="headerlink" title="希望能对你有所帮助(p_o)"></a>希望能对你有所帮助(p_o)</h1>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://www.codewars.com/kata/54521e9ec8e60bc4de000d6c/train/cpp&quot;&gt;题目链接&lt;/a&gt;&lt;br&gt;内容介绍&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight text&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;The maximum sum subarray problem consists in finding the maximum sum of a contiguous subsequence in an array or list of integers:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;maxSequence(&amp;#123;-2, 1, -3, 4, -1, 2, 1, -5, 4&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//should be 6: &amp;#123;4, -1, 2, 1&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Easy case is when the list is made up of only positive numbers and the maximum sum is the sum of the whole array. If the list is made up of only negative numbers, return 0 instead.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Empty list is considered to have zero greatest sum. Note that the empty list or array is also a valid sublist/subarray.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;blockquote&gt;
&lt;p&gt;题目的大致意思就是,给你一个容器,里面是 int 型变量&lt;br&gt;写一个函数,返回一个最大值,&lt;br&gt;这个最大值是容器里面连续片段求和的最大值&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="codewars" scheme="https://zhangpf2000.github.io/categories/codewars/"/>
    
      <category term="cpp" scheme="https://zhangpf2000.github.io/categories/codewars/cpp/"/>
    
    
      <category term="codewars" scheme="https://zhangpf2000.github.io/tags/codewars/"/>
    
      <category term="cpp" scheme="https://zhangpf2000.github.io/tags/cpp/"/>
    
  </entry>
  
  <entry>
    <title>05_cpp_去除容器中最大值和最小值后其余值之和</title>
    <link href="https://zhangpf2000.github.io/2021/04/24/codewars/05_cpp_%E5%8E%BB%E9%99%A4%E5%AE%B9%E5%99%A8%E4%B8%AD%E6%9C%80%E5%A4%A7%E5%80%BC%E5%92%8C%E6%9C%80%E5%B0%8F%E5%80%BC%E5%90%8E%E5%85%B6%E4%BD%99%E5%80%BC%E4%B9%8B%E5%92%8C.html/"/>
    <id>https://zhangpf2000.github.io/2021/04/24/codewars/05_cpp_%E5%8E%BB%E9%99%A4%E5%AE%B9%E5%99%A8%E4%B8%AD%E6%9C%80%E5%A4%A7%E5%80%BC%E5%92%8C%E6%9C%80%E5%B0%8F%E5%80%BC%E5%90%8E%E5%85%B6%E4%BD%99%E5%80%BC%E4%B9%8B%E5%92%8C.html/</id>
    <published>2021-04-24T08:29:36.000Z</published>
    <updated>2021-04-24T08:32:53.609Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://www.codewars.com/kata/576b93db1129fcf2200001e6/train/cpp">题目链接</a><br>内容介绍</p></blockquote><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Sum all the numbers of the array (in F# and Haskell you get a list) except the highest and the lowest element (the value, not the index!).</span><br><span class="line">(The highest/lowest element is respectively only one element at each edge, even if there are more than one with the same value!)</span><br><span class="line"></span><br><span class="line">Example:</span><br><span class="line"></span><br><span class="line">&#123; 6, 2, 1, 8, 10 &#125; =&gt; 16</span><br><span class="line">&#123; 1, 1, 11, 2, 3 &#125; =&gt; 6</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">If array is empty, null or None, or if only 1 Element exists, return 0.</span><br><span class="line">Note:In C++ instead null an empty vector is used. In C there is no null. ;-)</span><br><span class="line"></span><br><span class="line">-- There&#x27;s no null in Haskell, therefore Maybe [Int] is used. Nothing represents null.</span><br><span class="line"></span><br><span class="line">Have fun coding it and please don&#x27;t forget to vote and rank this kata! :-)</span><br><span class="line"></span><br><span class="line">I have created other katas. Have a look if you like coding and challenges.</span><br><span class="line"></span><br></pre></td></tr></table></figure><span id="more"></span><blockquote><p>我的解题代码</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; numbers)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (numbers.size() &lt; <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> min = *<span class="built_in">std</span>::min_element(numbers.cbegin(), numbers.cend());</span><br><span class="line">    <span class="keyword">int</span> max = *<span class="built_in">std</span>::max_element(numbers.cbegin(), numbers.cend());</span><br><span class="line">    <span class="keyword">int</span> add=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;i : numbers)</span><br><span class="line">        add+=i;</span><br><span class="line">    <span class="keyword">return</span> add-min-max;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 这里我使用了前面学的算法</span></span><br><span class="line"><span class="comment"> * 轻松获得容器中的最大值和最小值</span></span><br><span class="line"><span class="comment"> * 对容器内所有元素求和再减去最大值和最小值</span></span><br><span class="line"><span class="comment"> * 注意:</span></span><br><span class="line"><span class="comment"> * 当容器为空,或者只有一个元素的时候,返回0</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h1 id="希望能对你有所帮助-p-o"><a href="#希望能对你有所帮助-p-o" class="headerlink" title="希望能对你有所帮助(p_o)"></a>希望能对你有所帮助(p_o)</h1>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://www.codewars.com/kata/576b93db1129fcf2200001e6/train/cpp&quot;&gt;题目链接&lt;/a&gt;&lt;br&gt;内容介绍&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight text&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Sum all the numbers of the array (in F# and Haskell you get a list) except the highest and the lowest element (the value, not the index!).&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(The highest/lowest element is respectively only one element at each edge, even if there are more than one with the same value!)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Example:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123; 6, 2, 1, 8, 10 &amp;#125; =&amp;gt; 16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123; 1, 1, 11, 2, 3 &amp;#125; =&amp;gt; 6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;If array is empty, null or None, or if only 1 Element exists, return 0.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Note:In C++ instead null an empty vector is used. In C there is no null. ;-)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-- There&amp;#x27;s no null in Haskell, therefore Maybe [Int] is used. Nothing represents null.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Have fun coding it and please don&amp;#x27;t forget to vote and rank this kata! :-)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;I have created other katas. Have a look if you like coding and challenges.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="codewars" scheme="https://zhangpf2000.github.io/categories/codewars/"/>
    
      <category term="cpp" scheme="https://zhangpf2000.github.io/categories/codewars/cpp/"/>
    
    
      <category term="codewars" scheme="https://zhangpf2000.github.io/tags/codewars/"/>
    
      <category term="cpp" scheme="https://zhangpf2000.github.io/tags/cpp/"/>
    
  </entry>
  
  <entry>
    <title>04_cpp_返回容器中的最小值</title>
    <link href="https://zhangpf2000.github.io/2021/04/24/codewars/04_cpp_%E8%BF%94%E5%9B%9E%E5%AE%B9%E5%99%A8%E4%B8%AD%E7%9A%84%E6%9C%80%E5%B0%8F%E5%80%BC.html/"/>
    <id>https://zhangpf2000.github.io/2021/04/24/codewars/04_cpp_%E8%BF%94%E5%9B%9E%E5%AE%B9%E5%99%A8%E4%B8%AD%E7%9A%84%E6%9C%80%E5%B0%8F%E5%80%BC.html/</id>
    <published>2021-04-24T08:12:41.000Z</published>
    <updated>2021-04-26T13:11:36.830Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://www.codewars.com/kata/55a2d7ebe362935a210000b2/train/cpp">题目链接</a><br>内容介绍</p></blockquote><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Given an array of integers your solution should find the smallest integer.</span><br><span class="line"></span><br><span class="line">For example:</span><br><span class="line"></span><br><span class="line">    Given [34, 15, 88, 2] your solution will return 2</span><br><span class="line">    Given [34, -345, -1, 100] your solution will return -345</span><br><span class="line"></span><br><span class="line">You can assume, for the purpose of this kata, that the supplied array will not be empty.</span><br></pre></td></tr></table></figure><span id="more"></span><blockquote><p>我的代码<br>这个题目还是很简单的</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findSmallest</span><span class="params">(<span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; <span class="built_in">list</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// Your Code is Here ... Hope you Enjoy</span></span><br><span class="line">    <span class="keyword">int</span> num = <span class="built_in">list</span>[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;i : <span class="built_in">list</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(num &gt;= i)</span><br><span class="line">            num = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="大佬的代码"><a href="#大佬的代码" class="headerlink" title="大佬的代码"></a>大佬的代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findSmallest</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; xs)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> *<span class="built_in">std</span>::min_element(xs.cbegin(), xs.cend());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用算法解决问题</span></span><br></pre></td></tr></table></figure><blockquote><p>这个题目的启发<br>多使用 cpp 的语法,而不要纠结于 c 语言的<br>cpp 的好多语法都很安全</p></blockquote><h1 id="希望能对你有所帮助-p-o"><a href="#希望能对你有所帮助-p-o" class="headerlink" title="希望能对你有所帮助(p_o)"></a>希望能对你有所帮助(p_o)</h1>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://www.codewars.com/kata/55a2d7ebe362935a210000b2/train/cpp&quot;&gt;题目链接&lt;/a&gt;&lt;br&gt;内容介绍&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight text&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Given an array of integers your solution should find the smallest integer.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;For example:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Given [34, 15, 88, 2] your solution will return 2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Given [34, -345, -1, 100] your solution will return -345&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;You can assume, for the purpose of this kata, that the supplied array will not be empty.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="codewars" scheme="https://zhangpf2000.github.io/categories/codewars/"/>
    
      <category term="cpp" scheme="https://zhangpf2000.github.io/categories/codewars/cpp/"/>
    
    
      <category term="codewars" scheme="https://zhangpf2000.github.io/tags/codewars/"/>
    
      <category term="cpp" scheme="https://zhangpf2000.github.io/tags/cpp/"/>
    
  </entry>
  
  <entry>
    <title>03_cpp_电影票找钱问题</title>
    <link href="https://zhangpf2000.github.io/2021/04/24/codewars/03_cpp_%E7%94%B5%E5%BD%B1%E7%A5%A8%E6%89%BE%E9%92%B1%E9%97%AE%E9%A2%98.html/"/>
    <id>https://zhangpf2000.github.io/2021/04/24/codewars/03_cpp_%E7%94%B5%E5%BD%B1%E7%A5%A8%E6%89%BE%E9%92%B1%E9%97%AE%E9%A2%98.html/</id>
    <published>2021-04-24T07:59:12.000Z</published>
    <updated>2021-04-24T08:08:11.509Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://www.codewars.com/kata/555615a77ebc7c2c8a0000b8/cpp">题目链接</a><br>内容介绍</p></blockquote><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Description:</span><br><span class="line"></span><br><span class="line">The new &quot;Avengers&quot; movie has just been released! There are a lot of people at the cinema box office standing in a huge line. Each of them has a single 100, 50 or 25 dollar bill. An &quot;Avengers&quot; ticket costs 25 dollars.</span><br><span class="line"></span><br><span class="line">Vasya is currently working as a clerk. He wants to sell a ticket to every single person in this line.</span><br><span class="line"></span><br><span class="line">Can Vasya sell a ticket to every person and give change if he initially has no money and sells the tickets strictly in the order people queue?</span><br><span class="line"></span><br><span class="line">Return YES, if Vasya can sell a ticket to every person and give change with the bills he has at hand at that moment. Otherwise return NO.</span><br><span class="line">Examples:</span><br><span class="line"></span><br><span class="line">tickets(&#123;25, 25, 50&#125;) // =&gt; YES</span><br><span class="line">tickets(&#123;25, 100&#125;) // =&gt; NO. Vasya will not have enough money to give change to 100 dollars</span><br><span class="line">tickets(&#123;25, 25, 50, 50, 100&#125;) // =&gt; NO. Vasya will not have the right bills to give 75 dollars of change (you can&#x27;t make two bills of 25 from one of 50)</span><br><span class="line"></span><br></pre></td></tr></table></figure><span id="more"></span><blockquote><p>我的解题思路<br>把钱分为三类:25,50,100<br>分别创建容器,来一个钱压入相对应的容器中<br>当压入 50 时,查看 25 的容器中是否还有钱,没有就返回”NO”<br>当压入 100 时,找钱 75,分两种情况,50+25|25+25+25<br>通过判断解决<br>代码演示</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">std</span>::<span class="built_in">string</span> <span class="title">tickets</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;peopleInLine)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// your code here</span></span><br><span class="line">    <span class="keyword">if</span> (peopleInLine[<span class="number">0</span>] != <span class="number">25</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;NO&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; m25;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; m50;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; m100;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> i : peopleInLine)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;i = &quot;</span> &lt;&lt; i &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">switch</span> (i)</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">25</span>:</span><br><span class="line">            m25.push_back(i);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">50</span>:</span><br><span class="line">            m50.push_back(i);</span><br><span class="line">            <span class="keyword">if</span> (m25.size() == <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;NO&quot;</span>;</span><br><span class="line">            m25.pop_back();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">100</span>:</span><br><span class="line">        &#123;</span><br><span class="line">            m100.push_back(i);</span><br><span class="line">            <span class="keyword">if</span> ((m50.size() &gt; <span class="number">0</span> &amp;&amp; m25.size() &gt; <span class="number">0</span>) || (m25.size() &gt; <span class="number">3</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (m50.size() == <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    m25.pop_back();</span><br><span class="line">                    m25.pop_back();</span><br><span class="line">                    m25.pop_back();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    m50.pop_back();</span><br><span class="line">                    m25.pop_back();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;NO&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;YES&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>上面的代码还有可以优化的地方<br>比如: 100 的容器根本就不用创建,因为不用 100 找零</p></blockquote><h2 id="大佬的解题代码"><a href="#大佬的解题代码" class="headerlink" title="大佬的解题代码"></a>大佬的解题代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">std</span>::<span class="built_in">string</span> <span class="title">tickets</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; peopleInLine)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> count[<span class="number">2</span>] = &#123;<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">auto</span> v: peopleInLine) &#123;</span><br><span class="line">    <span class="keyword">if</span>(v == <span class="number">25</span>) count[<span class="number">0</span>]++;</span><br><span class="line">    <span class="keyword">if</span>(v == <span class="number">50</span>) &#123;count[<span class="number">1</span>]++; count[<span class="number">0</span>]--;&#125;</span><br><span class="line">    <span class="keyword">if</span>(v == <span class="number">100</span>) &#123;count[<span class="number">0</span>]--; count[<span class="number">1</span>]&gt;<span class="number">0</span>? count[<span class="number">1</span>]-- : count[<span class="number">0</span>]-=<span class="number">2</span>;&#125;</span><br><span class="line">    <span class="keyword">if</span>(count[<span class="number">0</span>]&lt;<span class="number">0</span>||count[<span class="number">1</span>]&lt;<span class="number">0</span>) <span class="keyword">return</span> <span class="string">&quot;NO&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;YES&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>分析:大佬是用数组将 25 和 50 的个数保存起来<br>需要找零的时候就减一,收钱的时候就加一<br>这样就更加的节省空间了<br>当收钱 100 的时候,找零是必须要找一张 25 的<br>所以可以提前找,后续判断 50 或 25 的够不够</p></blockquote><h1 id="希望能对你有所帮助-p-o"><a href="#希望能对你有所帮助-p-o" class="headerlink" title="希望能对你有所帮助(p_o)"></a>希望能对你有所帮助(p_o)</h1>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://www.codewars.com/kata/555615a77ebc7c2c8a0000b8/cpp&quot;&gt;题目链接&lt;/a&gt;&lt;br&gt;内容介绍&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight text&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Description:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;The new &amp;quot;Avengers&amp;quot; movie has just been released! There are a lot of people at the cinema box office standing in a huge line. Each of them has a single 100, 50 or 25 dollar bill. An &amp;quot;Avengers&amp;quot; ticket costs 25 dollars.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Vasya is currently working as a clerk. He wants to sell a ticket to every single person in this line.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Can Vasya sell a ticket to every person and give change if he initially has no money and sells the tickets strictly in the order people queue?&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Return YES, if Vasya can sell a ticket to every person and give change with the bills he has at hand at that moment. Otherwise return NO.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Examples:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tickets(&amp;#123;25, 25, 50&amp;#125;) // =&amp;gt; YES&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tickets(&amp;#123;25, 100&amp;#125;) // =&amp;gt; NO. Vasya will not have enough money to give change to 100 dollars&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tickets(&amp;#123;25, 25, 50, 50, 100&amp;#125;) // =&amp;gt; NO. Vasya will not have the right bills to give 75 dollars of change (you can&amp;#x27;t make two bills of 25 from one of 50)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="codewars" scheme="https://zhangpf2000.github.io/categories/codewars/"/>
    
      <category term="cpp" scheme="https://zhangpf2000.github.io/categories/codewars/cpp/"/>
    
    
      <category term="codewars" scheme="https://zhangpf2000.github.io/tags/codewars/"/>
    
      <category term="cpp" scheme="https://zhangpf2000.github.io/tags/cpp/"/>
    
  </entry>
  
  <entry>
    <title>02_shell_返回字符串中重复字符的个数</title>
    <link href="https://zhangpf2000.github.io/2021/04/24/codewars/02_shell_%E8%BF%94%E5%9B%9E%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E4%B8%AA%E6%95%B0.html/"/>
    <id>https://zhangpf2000.github.io/2021/04/24/codewars/02_shell_%E8%BF%94%E5%9B%9E%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E4%B8%AA%E6%95%B0.html/</id>
    <published>2021-04-24T06:02:39.000Z</published>
    <updated>2021-04-24T06:36:18.358Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://www.codewars.com/kata/54bf1c2cd5b56cc47f0007a1/shell">题目链接</a><br>内容介绍</p></blockquote><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Count the number of Duplicates</span><br><span class="line"></span><br><span class="line">Write a function that will return the count of distinct case-insensitive alphabetic characters and numeric digits that occur more than once in the input string. The input string can be assumed to contain only alphabets (both uppercase and lowercase) and numeric digits.</span><br><span class="line">Example</span><br><span class="line"></span><br><span class="line">&quot;abcde&quot; -&gt; 0 # no characters repeats more than once</span><br><span class="line">&quot;aabbcde&quot; -&gt; 2 # &#x27;a&#x27; and &#x27;b&#x27;</span><br><span class="line">&quot;aabBcde&quot; -&gt; 2 # &#x27;a&#x27; occurs twice and &#x27;b&#x27; twice (`b` and `B`)</span><br><span class="line">&quot;indivisibility&quot; -&gt; 1 # &#x27;i&#x27; occurs six times</span><br><span class="line">&quot;Indivisibilities&quot; -&gt; 2 # &#x27;i&#x27; occurs seven times and &#x27;s&#x27; occurs twice</span><br><span class="line">&quot;aA11&quot; -&gt; 2 # &#x27;a&#x27; and &#x27;1&#x27;</span><br><span class="line">&quot;ABBA&quot; -&gt; 2 # &#x27;A&#x27; and &#x27;B&#x27; each occur twice</span><br><span class="line">/**</span><br><span class="line"> * 给定一个字符串</span><br><span class="line"> * 忽略字符的大小写,字符串中只有英文字母和数字</span><br><span class="line"> * 返回里面有几个字符是重复的</span><br><span class="line">*/</span><br></pre></td></tr></table></figure><span id="more"></span><blockquote><p>我的解决方案<br>通过把字符串拆成单个字符<br>判断字符的重复个数<br>比较返回<br>代码掩饰</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> count</span><br><span class="line">&#123;</span><br><span class="line">        <span class="keyword">if</span> [ -z <span class="variable">$1</span> ] ; <span class="keyword">then</span></span><br><span class="line">                <span class="built_in">echo</span> <span class="string">&#x27;空字符串&#x27;</span></span><br><span class="line">                <span class="built_in">return</span> 0</span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">        <span class="comment"># 这些是获取字符串的长度的方法</span></span><br><span class="line">        <span class="comment">#echo $1 | wc -c</span></span><br><span class="line">        <span class="comment">#var=$1</span></span><br><span class="line">        <span class="comment">#echo $&#123;#var&#125;</span></span><br><span class="line">        <span class="comment">#expr length $1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 循环遍历把每个字符放到数组中</span></span><br><span class="line">        <span class="keyword">for</span>((i=1;i&lt;=$(expr length <span class="variable">$1</span>); i++))</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">                <span class="comment">#echo $(echo $1 | cut -b $i)</span></span><br><span class="line">                Arr[i-1]=`<span class="built_in">echo</span> <span class="variable">$1</span> | cut -b <span class="variable">$i</span>`</span><br><span class="line">        <span class="keyword">done</span></span><br><span class="line">        <span class="comment"># echo Arr[@]是打印出数组中所有的内容,以空格区分</span></span><br><span class="line">        <span class="built_in">test</span>=$(<span class="built_in">echo</span> <span class="variable">$&#123;Arr[@]&#125;</span> | tr <span class="string">&quot; &quot;</span> <span class="string">&quot;\n&quot;</span> | sort | uniq -ci | tr [:alpha:] <span class="string">&#x27; &#x27;</span> | sed s/[[:space:]]//g)</span><br><span class="line">        <span class="comment"># 上面的是对字符的处理</span></span><br><span class="line">        <span class="comment"># tr &quot; &quot; &quot;\n&quot;把空格换成换行</span></span><br><span class="line">        <span class="comment"># sort 排序</span></span><br><span class="line">        <span class="comment"># uniq -ci 去重,c是输出重复的个数,i是忽略大小写</span></span><br><span class="line">        <span class="comment"># tr [:alpha:] &#x27; &#x27;是把字符换成空格</span></span><br><span class="line">        <span class="comment"># sed s/[[:space:]]//g 删除所有的空格</span></span><br><span class="line">        <span class="comment"># 这个可能会有bug, 数字那个地方</span></span><br><span class="line">        count=0</span><br><span class="line">        <span class="keyword">for</span> t <span class="keyword">in</span> <span class="variable">$test</span></span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">            <span class="comment"># 把字符串变成数字</span></span><br><span class="line">            num=$((<span class="number">10</span>#<span class="variable">$&#123;t&#125;</span>))</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;num = <span class="variable">$num</span>&quot;</span></span><br><span class="line">            <span class="keyword">if</span> [ <span class="variable">$num</span> -gt 1 ] ; <span class="keyword">then</span></span><br><span class="line">                <span class="comment"># 数字自增</span></span><br><span class="line">                count=$((<span class="variable">$count</span>+<span class="number">1</span>))</span><br><span class="line">            <span class="keyword">fi</span></span><br><span class="line">        <span class="keyword">done</span></span><br><span class="line">        <span class="built_in">return</span> <span class="variable">$count</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">count <span class="variable">$1</span></span><br><span class="line"><span class="built_in">echo</span> $?</span><br><span class="line"></span><br><span class="line"><span class="comment"># 我是写了个函数</span></span><br><span class="line"><span class="comment"># 传入的参数是$1</span></span><br><span class="line"><span class="comment"># 最后的echo $?是打印调用函数的返回值</span></span><br></pre></td></tr></table></figure><blockquote><p>我的解决方案还是有很大的缺陷<br>过了测试是侥幸<br>里面对字符串的处理还是不清楚</p></blockquote><h2 id="看看大佬的解决方案"><a href="#看看大佬的解决方案" class="headerlink" title="看看大佬的解决方案"></a>看看大佬的解决方案</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$1</span> | grep -o . | sort -f | uniq -id | wc -l</span><br><span class="line"><span class="comment"># grep -o .</span></span><br><span class="line"><span class="comment"># -o, --only-matching       只显示行中非空匹配部分</span></span><br><span class="line"><span class="comment"># -o 后面的是正则表达式</span></span><br><span class="line"><span class="comment"># sort -f :忽略大小写进行排序</span></span><br><span class="line"><span class="comment"># uniq -id</span></span><br><span class="line"><span class="comment"># 去重,-i 是忽略大小写,-d是打印重复的行,不重复的不显示</span></span><br><span class="line"><span class="comment"># wc -l, 输出行数</span></span><br><span class="line"><span class="comment"># 太强了</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># =====================================</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$1</span> | tr [A-Z] [a-z] | grep -o . | sort | uniq -d | wc -l</span><br><span class="line"><span class="comment"># 这个大致都差不多</span></span><br><span class="line"><span class="comment"># tr [A-Z] [a-z]是通过把大写都换成小写的,忽略大小写进行排序</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># =====================================</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$1</span> \</span><br><span class="line">   | tr <span class="string">&#x27;[:upper:]&#x27;</span> <span class="string">&#x27;[:lower:]&#x27;</span> \</span><br><span class="line">   | awk -F <span class="string">&#x27;&#x27;</span> <span class="string">&#x27;BEGIN&#123;OFS=&quot;\n&quot;&#125; &#123;$1=$1; print $0&#125;&#x27;</span> \</span><br><span class="line">   | sort \</span><br><span class="line">   | uniq -c \</span><br><span class="line">   | awk <span class="string">&#x27;&#123;if ($1&gt;=2) print $2&#125;&#x27;</span> \</span><br><span class="line">   | wc -l</span><br><span class="line"></span><br><span class="line"><span class="comment"># =====================================</span></span><br><span class="line">ls -al</span><br><span class="line"><span class="comment"># why?????????????/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># =====================================</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$@</span> | grep -o . | awk <span class="string">&#x27;&#123;print toupper($0)&#125;&#x27;</span> | sort | uniq -idc | wc -l</span><br></pre></td></tr></table></figure><h2 id="学到的知识点"><a href="#学到的知识点" class="headerlink" title="学到的知识点"></a>学到的知识点</h2><blockquote><p>grep -o .<br>sort -f<br>uniq -idc<br>tr ‘xxx’ ‘xxx’<br>wc -l<br>字符串转数字+shell 中数字相加</p></blockquote><figure class="highlight bash"><figcaption><span>字符串转数字 >folded</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#linux shell 字符串转数字</span></span><br><span class="line"><span class="comment">#转载：https://blog.csdn.net/whish1994/article/details/78379659</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#原型： value=$((n#$&#123;key&#125;Xm))</span></span><br><span class="line"><span class="comment">#value:自定义变量得到运算的值</span></span><br><span class="line"><span class="comment">#n:欲转成的进制数； 2进制就是2，10进制就是10</span></span><br><span class="line"><span class="comment">#key:字符串变量</span></span><br><span class="line"><span class="comment">#X：操作符；如+ - * /  &amp;...</span></span><br><span class="line"><span class="comment">#m:操作数</span></span><br><span class="line"><span class="comment">#实例1：10进制字符32加上32</span></span><br><span class="line"></span><br><span class="line">a=<span class="string">&#x27;32&#x27;</span></span><br><span class="line">value=$((<span class="number">10</span>#<span class="variable">$&#123;a&#125;</span>+<span class="number">32</span>))</span><br><span class="line"><span class="comment">#=================</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="comment">#本脚本测试shell脚本中整型变量自增 加1的几种方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#定义整型变量</span></span><br><span class="line">a=1</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$a</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#第一种整型变量自增方式</span></span><br><span class="line">a=$((<span class="variable">$a</span>+<span class="number">1</span>))</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$a</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#第二种整型变量自增方式</span></span><br><span class="line">a=$[<span class="variable">$a</span>+1]</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$a</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#第三种整型变量自增方式</span></span><br><span class="line">a=`expr <span class="variable">$a</span> + 1`</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$a</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#第四种整型变量自增方式</span></span><br><span class="line"><span class="built_in">let</span> a++</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$a</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#第五种整型变量自增方式</span></span><br><span class="line"><span class="built_in">let</span> a+=1</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$a</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#第六种整型变量自增方式</span></span><br><span class="line">((a++))</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$a</span></span><br><span class="line">————————————————</span><br><span class="line">版权声明：本文为CSDN博主「yumushui」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。</span><br><span class="line">原文链接：https://blog.csdn.net/yumushui/article/details/53469845</span><br></pre></td></tr></table></figure><h1 id="希望能对你有所帮助-p-o"><a href="#希望能对你有所帮助-p-o" class="headerlink" title="希望能对你有所帮助(p_o)"></a>希望能对你有所帮助(p_o)</h1>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://www.codewars.com/kata/54bf1c2cd5b56cc47f0007a1/shell&quot;&gt;题目链接&lt;/a&gt;&lt;br&gt;内容介绍&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight text&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Count the number of Duplicates&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Write a function that will return the count of distinct case-insensitive alphabetic characters and numeric digits that occur more than once in the input string. The input string can be assumed to contain only alphabets (both uppercase and lowercase) and numeric digits.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Example&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;quot;abcde&amp;quot; -&amp;gt; 0 # no characters repeats more than once&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;quot;aabbcde&amp;quot; -&amp;gt; 2 # &amp;#x27;a&amp;#x27; and &amp;#x27;b&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;quot;aabBcde&amp;quot; -&amp;gt; 2 # &amp;#x27;a&amp;#x27; occurs twice and &amp;#x27;b&amp;#x27; twice (`b` and `B`)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;quot;indivisibility&amp;quot; -&amp;gt; 1 # &amp;#x27;i&amp;#x27; occurs six times&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;quot;Indivisibilities&amp;quot; -&amp;gt; 2 # &amp;#x27;i&amp;#x27; occurs seven times and &amp;#x27;s&amp;#x27; occurs twice&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;quot;aA11&amp;quot; -&amp;gt; 2 # &amp;#x27;a&amp;#x27; and &amp;#x27;1&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;quot;ABBA&amp;quot; -&amp;gt; 2 # &amp;#x27;A&amp;#x27; and &amp;#x27;B&amp;#x27; each occur twice&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * 给定一个字符串&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * 忽略字符的大小写,字符串中只有英文字母和数字&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * 返回里面有几个字符是重复的&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*/&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="codewars" scheme="https://zhangpf2000.github.io/categories/codewars/"/>
    
      <category term="shell" scheme="https://zhangpf2000.github.io/categories/codewars/shell/"/>
    
    
      <category term="codewars" scheme="https://zhangpf2000.github.io/tags/codewars/"/>
    
      <category term="shell" scheme="https://zhangpf2000.github.io/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>01_cpp_返回字符串中的最大值和最小值</title>
    <link href="https://zhangpf2000.github.io/2021/04/24/codewars/01_cpp_%E8%BF%94%E5%9B%9E%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%9A%84%E6%9C%80%E5%A4%A7%E5%80%BC%E5%92%8C%E6%9C%80%E5%B0%8F%E5%80%BC.html/"/>
    <id>https://zhangpf2000.github.io/2021/04/24/codewars/01_cpp_%E8%BF%94%E5%9B%9E%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%9A%84%E6%9C%80%E5%A4%A7%E5%80%BC%E5%92%8C%E6%9C%80%E5%B0%8F%E5%80%BC.html/</id>
    <published>2021-04-24T02:05:13.000Z</published>
    <updated>2021-04-24T02:43:51.892Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://www.codewars.com/kata/554b4ac871d6813a03000035/cpp">题目链接</a><br>内容介绍:</p></blockquote><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">In this little assignment you are given a string of space separated numbers, and have to return the highest and lowest number.</span><br><span class="line"></span><br><span class="line">Example:</span><br><span class="line"></span><br><span class="line">highAndLow(&quot;1 2 3 4 5&quot;);  // return &quot;5 1&quot;</span><br><span class="line">highAndLow(&quot;1 2 -3 4 5&quot;); // return &quot;5 -3&quot;</span><br><span class="line">highAndLow(&quot;1 9 3 4 -5&quot;); // return &quot;9 -5&quot;</span><br><span class="line"></span><br><span class="line">Notes:</span><br><span class="line"></span><br><span class="line">    All numbers are valid Int32, no need to validate them.</span><br><span class="line">    There will always be at least one number in the input string.</span><br><span class="line">    Output string must be two numbers separated by a single space, and highest number is first.</span><br></pre></td></tr></table></figure><span id="more"></span><blockquote><p>我的解决方案</p><ul><li>for 循环遍历字符串中的每个字符</li><li>通过判断将字符组成新的字符串(数字字符串)</li><li>把这些数字字符串放入容器 vector 中</li><li>依次弹出容器中的字符串,转换成数字</li><li>进行数字比较,确定最小值和最大值</li><li>返回最大值和最小值<br>我的提交代码如下</li></ul></blockquote><figure class="highlight cpp"><figcaption><span>我的解决方案 >folded</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">test</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">string</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">bool</span> tag = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">/* code */</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; s.length(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/* code */</span></span><br><span class="line">        <span class="keyword">if</span> (s[i] == <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            tag = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        num = num * <span class="number">10</span> + (s[i] - <span class="number">48</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    num = tag ? num : num * <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">std</span>::<span class="built_in">string</span> <span class="title">highAndLow</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; numbers)</span></span>&#123;</span><br><span class="line">    <span class="comment">//your code here</span></span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> num_min = <span class="number">0</span>, num_max = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt; vs;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> str = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt;= numbers.length(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (numbers[i] != <span class="string">&#x27; &#x27;</span> &amp;&amp; (numbers[i] == <span class="string">&#x27;-&#x27;</span> || (<span class="number">48</span> &lt;= numbers[i] &amp;&amp; numbers[i] &lt;= <span class="number">57</span>)))</span><br><span class="line">        &#123;</span><br><span class="line">            str = str + numbers[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (numbers[i] == <span class="string">&#x27; &#x27;</span> || numbers[i] == <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            vs.push_back(str);</span><br><span class="line">            str = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            str = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> s1 = <span class="string">&quot;&quot;</span>, s2 = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    num_max = num_min = test(vs[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; vs.size(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        num = test(vs[i]);</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;num = &quot;</span> &lt;&lt; num &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        s1 = ((num &lt;= num_min) ? vs[i] : s1);</span><br><span class="line">        s2 = ((num &gt;= num_max) ? vs[i] : s2);</span><br><span class="line">        num_min = ((num &lt; num_min) ? num : num_min);</span><br><span class="line">        num_max = ((num &gt; num_max) ? num : num_max);</span><br><span class="line">        num = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    str = s2 + <span class="string">&#x27; &#x27;</span> + s1;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>我的方案还是不好,代码篇幅太大<br>空间时间复杂度都比较高<br>思路没有问题,但是还可以再优化</p></blockquote><figure class="highlight cpp"><figcaption><span>优化方案 >folded</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;limits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">test</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">string</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">bool</span> tag = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">/* code */</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; s.length(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/* code */</span></span><br><span class="line">        <span class="keyword">if</span> (s[i] == <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            tag = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        num = num * <span class="number">10</span> + (s[i] - <span class="number">48</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    num = tag ? num : num * <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> num;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">std</span>::<span class="built_in">string</span> <span class="title">highAndLow</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">string</span> numbers)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//your code here</span></span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> num_min = <span class="built_in">std</span>::numeric_limits&lt;<span class="keyword">int</span>&gt;::max(), num_max = <span class="built_in">std</span>::numeric_limits&lt;<span class="keyword">int</span>&gt;::min();</span><br><span class="line">    <span class="comment">// 这个是让num_min=int范围内的最大值,num_max=int范围内的最小值</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> str = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> s1 = <span class="string">&quot;&quot;</span>, s2 = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt;= numbers.length(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (numbers[i] != <span class="string">&#x27; &#x27;</span> &amp;&amp; (numbers[i] == <span class="string">&#x27;-&#x27;</span> || (<span class="number">48</span> &lt;= numbers[i] &amp;&amp; numbers[i] &lt;= <span class="number">57</span>)))</span><br><span class="line">        &#123;</span><br><span class="line">            str = str + numbers[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (numbers[i] == <span class="string">&#x27; &#x27;</span> || numbers[i] == <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            num = test(str);</span><br><span class="line">            s1 = ((num &lt;= num_min) ? str : s1);</span><br><span class="line">            s2 = ((num &gt;= num_max) ? str : s2);</span><br><span class="line">            num_min = ((num &lt; num_min) ? num : num_min);</span><br><span class="line">            num_max = ((num &gt; num_max) ? num : num_max);</span><br><span class="line">            str=<span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            str = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    str = s2 + <span class="string">&#x27; &#x27;</span> + s1;</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>上面这个解决方案中<br>舍弃了容器,直接让确定的数字字符串转换成数字返回<br>然后进行比较<br>不过这个使用了<code>&lt;limits&gt;</code>这个头文件<br>是为了让比较的初始值为最大(num_min)和最小(num_max)<br>防止出现无法比较的情况,这个方案就比上面那个要好很多了</p></blockquote><hr><h1 id="大佬的解决方案"><a href="#大佬的解决方案" class="headerlink" title="大佬的解决方案"></a>大佬的解决方案</h1><figure class="highlight cpp"><figcaption><span>大佬的解决方案</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;limits&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">std</span>::<span class="built_in">string</span> <span class="title">highAndLow</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; numbers)</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="built_in">std</span>::<span class="built_in">stringstream</span> <span class="title">ss</span><span class="params">(numbers)</span></span>;</span><br><span class="line">  <span class="keyword">int</span> temp, min = <span class="built_in">std</span>::numeric_limits&lt;<span class="keyword">int</span>&gt;::max(), max = <span class="built_in">std</span>::numeric_limits&lt;<span class="keyword">int</span>&gt;::min();</span><br><span class="line">  <span class="keyword">while</span> (ss &gt;&gt; temp) &#123;</span><br><span class="line">    min = (temp &lt; min) ? temp : min;</span><br><span class="line">    max = (temp &gt; max) ? temp : max;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">std</span>::to_string(max) + <span class="string">&quot; &quot;</span> + <span class="built_in">std</span>::to_string(min);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 这里主要是使用了#include &lt;sstring&gt;头文件</span></span><br><span class="line"><span class="comment"> * 以下是我的对sstring的推测</span></span><br><span class="line"><span class="comment"> * 头文件中的stream是流的意思</span></span><br><span class="line"><span class="comment"> * 常见的有iostream(标准输入输出流),和fstream(文件输入输出流)</span></span><br><span class="line"><span class="comment"> * iostream中有istream和ostream两个常见的类</span></span><br><span class="line"><span class="comment"> * fstream中有fstream,ifstream,ofstream三个类(常见的)</span></span><br><span class="line"><span class="comment"> * 推测sstream是字符串流处理,专门处理字符串流的</span></span><br><span class="line"><span class="comment"> * sstream有stringstream,istringstream和ostringstream三个类</span></span><br><span class="line"><span class="comment"> * 用法和上面的fstream差不多,也支持`&gt;&gt;`和`&lt;&lt;`运算符</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 上面大佬的解决思路大致就是</span></span><br><span class="line"><span class="comment"> * 把传入的字符串传入字符串流ss中,</span></span><br><span class="line"><span class="comment"> * ss &gt;&gt; temp是把字符串流中的数据输入到temp(int类型)中</span></span><br><span class="line"><span class="comment"> * 然后进行比较判断,最后把最大数和最小数转换成字符串</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * `&gt;&gt;` 这个具有和std::cin &gt;&gt; test差不多的特性</span></span><br><span class="line"><span class="comment"> * 输入空格后就停止,然后进行下一个</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="学到的知识点"><a href="#学到的知识点" class="headerlink" title="学到的知识点"></a>学到的知识点</h2><blockquote><p><code>#include &lt;sstring&gt;</code><br><code>#include &lt;limits&gt;</code><br>主要是<code>sstring</code>头文件,以后可以方便的处理字符串数据<br>可以多了解了解这个头文件中的类,函数<br><code>sstring</code>举例</p></blockquote><figure class="highlight cpp"><figcaption><span>sstring例子</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">stringstream</span> stream;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> result;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1000</span>;</span><br><span class="line">    stream &lt;&lt; i; <span class="comment">//将int输入流</span></span><br><span class="line">    stream &gt;&gt; result; <span class="comment">//从stream中抽取前面插入的int值</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; result &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>; <span class="comment">// print the string &quot;1000&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="希望能对你有所帮助-p-o"><a href="#希望能对你有所帮助-p-o" class="headerlink" title="希望能对你有所帮助(p_o)"></a>希望能对你有所帮助(p_o)</h1>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://www.codewars.com/kata/554b4ac871d6813a03000035/cpp&quot;&gt;题目链接&lt;/a&gt;&lt;br&gt;内容介绍:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight text&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;In this little assignment you are given a string of space separated numbers, and have to return the highest and lowest number.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Example:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;highAndLow(&amp;quot;1 2 3 4 5&amp;quot;);  // return &amp;quot;5 1&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;highAndLow(&amp;quot;1 2 -3 4 5&amp;quot;); // return &amp;quot;5 -3&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;highAndLow(&amp;quot;1 9 3 4 -5&amp;quot;); // return &amp;quot;9 -5&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Notes:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    All numbers are valid Int32, no need to validate them.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    There will always be at least one number in the input string.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Output string must be two numbers separated by a single space, and highest number is first.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="codewars" scheme="https://zhangpf2000.github.io/categories/codewars/"/>
    
      <category term="cpp" scheme="https://zhangpf2000.github.io/categories/codewars/cpp/"/>
    
    
      <category term="codewars" scheme="https://zhangpf2000.github.io/tags/codewars/"/>
    
      <category term="cpp" scheme="https://zhangpf2000.github.io/tags/cpp/"/>
    
  </entry>
  
  <entry>
    <title>01_初步使用docker</title>
    <link href="https://zhangpf2000.github.io/2021/04/23/docker/01_%E5%88%9D%E6%AD%A5%E4%BD%BF%E7%94%A8docker.html/"/>
    <id>https://zhangpf2000.github.io/2021/04/23/docker/01_%E5%88%9D%E6%AD%A5%E4%BD%BF%E7%94%A8docker.html/</id>
    <published>2021-04-23T08:42:37.000Z</published>
    <updated>2021-04-23T09:15:24.138Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>摘要<br>第一步:安装 Docker<br>终端执行<code>curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun</code><br>注意:在我的 debian 的使用中,每次都需要<code>sudo</code><br>为了不节省可以使用以下办法解决<br><code>sudo usermod -aG docker $&#123;USER&#125;</code><br><code>sudo service docker restart</code><br>重启操作系统即可</p><hr><p>第二步:常规操作</p><ul><li><a href="#搜索镜像">search</a></li><li><a href="#docker-拉取镜像">pull</a></li><li><a href="#docker-列出镜像列表">images</a></li><li><a href="#docker-创建容器">run</a></li><li><a href="#docker-启动容器">容器的停止启动和重启等</a></li><li><a href="#docker-启动容器">链接容器</a></li><li><a href="#docker-删除容器和镜像">删除容器</a></li><li><a href="#docker-删除容器和镜像">删除镜像</a></li></ul></blockquote><h1 id="常规操作"><a href="#常规操作" class="headerlink" title="常规操作"></a>常规操作</h1><h2 id="搜索镜像"><a href="#搜索镜像" class="headerlink" title="搜索镜像"></a>搜索镜像</h2><figure class="highlight bash"><figcaption><span>搜索镜像 >folded</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">zpf@debian:~/Test/docker$ docker search ubuntu</span><br><span class="line">NAME                                                      DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED</span><br><span class="line">ubuntu                                                    Ubuntu is a Debian-based Linux operating sys…   12133     [OK]</span><br><span class="line">dorowu/ubuntu-desktop-lxde-vnc                            Docker image to provide HTML5 VNC interface …   523                  [OK]</span><br><span class="line">websphere-liberty                                         WebSphere Liberty multi-architecture images …   267       [OK]</span><br><span class="line">rastasheep/ubuntu-sshd                                    Dockerized SSH service, built on top of offi…   249                  [OK]</span><br><span class="line">consol/ubuntu-xfce-vnc                                    Ubuntu container with <span class="string">&quot;headless&quot;</span> VNC session…   236                  [OK]</span><br><span class="line">ubuntu-upstart                                            Upstart is an event-based replacement <span class="keyword">for</span> th…   110       [OK]</span><br><span class="line">1and1internet/ubuntu-16-nginx-php-phpmyadmin-mysql-5      ubuntu-16-nginx-php-phpmyadmin-mysql-5          50                   [OK]</span><br><span class="line">ubuntu-debootstrap                                        debootstrap --variant=minbase --components=m…   44        [OK]</span><br><span class="line">open-liberty                                              Open Liberty multi-architecture images based…   43        [OK]</span><br><span class="line">nuagebec/ubuntu                                           Simple always updated Ubuntu docker images w…   24                   [OK]</span><br><span class="line">i386/ubuntu                                               Ubuntu is a Debian-based Linux operating sys…   24</span><br><span class="line">solita/ubuntu-systemd                                     Ubuntu + systemd                                24                   [OK]</span><br><span class="line">1and1internet/ubuntu-16-apache-php-5.6                    ubuntu-16-apache-php-5.6                        14                   [OK]</span><br><span class="line">1and1internet/ubuntu-16-apache-php-7.0                    ubuntu-16-apache-php-7.0                        13                   [OK]</span><br><span class="line">1and1internet/ubuntu-16-nginx-php-phpmyadmin-mariadb-10   ubuntu-16-nginx-php-phpmyadmin-mariadb-10       11                   [OK]</span><br><span class="line">1and1internet/ubuntu-16-nginx-php-5.6-wordpress-4         ubuntu-16-nginx-php-5.6-wordpress-4             9                    [OK]</span><br><span class="line">1and1internet/ubuntu-16-nginx-php-5.6                     ubuntu-16-nginx-php-5.6                         8                    [OK]</span><br><span class="line">1and1internet/ubuntu-16-apache-php-7.1                    ubuntu-16-apache-php-7.1                        6                    [OK]</span><br><span class="line">1and1internet/ubuntu-16-nginx-php-7.0                     ubuntu-16-nginx-php-7.0                         4                    [OK]</span><br><span class="line">pivotaldata/ubuntu                                        A quick freshening-up of the base Ubuntu doc…   4</span><br><span class="line">pivotaldata/ubuntu16.04-build                             Ubuntu 16.04 image <span class="keyword">for</span> GPDB compilation         2</span><br><span class="line">pivotaldata/ubuntu-gpdb-dev                               Ubuntu images <span class="keyword">for</span> GPDB development              1</span><br><span class="line">1and1internet/ubuntu-16-php-7.1                           ubuntu-16-php-7.1                               1                    [OK]</span><br><span class="line">smartentry/ubuntu                                         ubuntu with smartentry                          1                    [OK]</span><br><span class="line">1and1internet/ubuntu-16-rspec                             ubuntu-16-rspec                                 0                    [OK]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="docker-拉取镜像"><a href="#docker-拉取镜像" class="headerlink" title="docker 拉取镜像"></a>docker 拉取镜像</h2><figure class="highlight bash"><figcaption><span>拉取镜像 >folded</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">zpf@debian:~/Test/docker$ docker pull ubuntu:latest</span><br><span class="line">latest: Pulling from library/ubuntu</span><br><span class="line">a70xxxxxxx98: Pull complete</span><br><span class="line">c43xxxxxxxf8: Pull complete</span><br><span class="line">10exxxxxxxc0: Pull complete</span><br><span class="line">Digest: sha256:3c9c713e097xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx9d695fb8039aa1f</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> ubuntu:latest</span><br><span class="line">docker.io/library/ubuntu:latest</span><br></pre></td></tr></table></figure><h2 id="docker-列出镜像列表"><a href="#docker-列出镜像列表" class="headerlink" title="docker 列出镜像列表"></a>docker 列出镜像列表</h2><figure class="highlight bash"><figcaption><span>镜像列表</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">zpf@debian:~/Test/docker$ docker images</span><br><span class="line">REPOSITORY   TAG       IMAGE ID       CREATED       SIZE</span><br><span class="line">ubuntu       latest    26bxxxxxxx2b   2 weeks ago   72.9MB</span><br><span class="line">zpf@debian:~/Test/docker$ docker images -a</span><br><span class="line">REPOSITORY   TAG       IMAGE ID       CREATED       SIZE</span><br><span class="line">ubuntu       latest    26bxxxxxxx2b   2 weeks ago   72.9MB</span><br><span class="line"><span class="comment"># -a 参数可以列出一些其他的镜像</span></span><br></pre></td></tr></table></figure><h2 id="docker-创建容器"><a href="#docker-创建容器" class="headerlink" title="docker 创建容器"></a>docker 创建容器</h2><figure class="highlight bash"><figcaption><span>docker创建容器</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">zpf@debian:~/Test/docker$ docker run -i -t --name hello ubuntu /bin/bash</span><br><span class="line">root@7c5xxxxxxx01:/<span class="comment"># ls</span></span><br><span class="line">bin  boot  dev  etc  home  lib  lib32  lib64  libx32  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 命令的格式为 docker run &lt;选项&gt; &lt;镜像名称&gt; &lt;要运行的文件&gt;</span></span><br><span class="line"><span class="comment"># 上面的意思是把ubuntu创建为名为hello的容器后</span></span><br><span class="line"><span class="comment"># 运行ubuntu镜像中的/bin/bash</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 使用-i(interactive)、-t(Pseudo-tty)选项可以在运行的Bash Shell中进行输入和输出</span></span><br><span class="line"><span class="comment"># 使用--name选项可以指定容器的名称,若不指定,docker会自动生成名称并进行指定</span></span><br><span class="line"><span class="comment"># 使用exit则退出容器,回到主机的shell终端中</span></span><br></pre></td></tr></table></figure><h2 id="docker-查看容器列表"><a href="#docker-查看容器列表" class="headerlink" title="docker 查看容器列表"></a>docker 查看容器列表</h2><figure class="highlight bash"><figcaption><span>docker查看容器列表</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">zpf@debian:~/Test/docker$ docker ps</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES</span><br><span class="line">zpf@debian:~/Test/docker$ docker ps -a</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND       CREATED         STATUS                     PORTS     NAMES</span><br><span class="line">7c574e977a01   ubuntu    <span class="string">&quot;/bin/bash&quot;</span>   5 minutes ago   Exited (0) 7 seconds ago             hello</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 添加-a参数可以列出所有的容器</span></span><br><span class="line"><span class="comment"># 默认的ps是列出所有活动的容器</span></span><br><span class="line"><span class="comment">#</span></span><br></pre></td></tr></table></figure><h2 id="docker-启动容器"><a href="#docker-启动容器" class="headerlink" title="docker 启动容器"></a>docker 启动容器</h2><figure class="highlight bash"><figcaption><span>docker启动/重启/停止容器</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">zpf@debian:~/Test/docker$ docker ps</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND       CREATED         STATUS          PORTS     NAMES</span><br><span class="line">7c574e977a01   ubuntu    <span class="string">&quot;/bin/bash&quot;</span>   7 minutes ago   Up 25 seconds             hello</span><br><span class="line">zpf@debian:~/Test/docker$ docker restart hello</span><br><span class="line">hello</span><br><span class="line">zpf@debian:~/Test/docker$ docker ps</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND       CREATED         STATUS         PORTS     NAMES</span><br><span class="line">7c574e977a01   ubuntu    <span class="string">&quot;/bin/bash&quot;</span>   7 minutes ago   Up 2 seconds             hello</span><br><span class="line">zpf@debian:~/Test/docker$ docker stop hello</span><br><span class="line">hello</span><br><span class="line">zpf@debian:~/Test/docker$ docker ps</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES</span><br><span class="line">zpf@debian:~/Test/docker$ docker ps -a</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND       CREATED         STATUS                     PORTS     NAMES</span><br><span class="line">7c574e977a01   ubuntu    <span class="string">&quot;/bin/bash&quot;</span>   7 minutes ago   Exited (0) 4 seconds ago             hello</span><br><span class="line">zpf@debian:~/Test/docker$ docker start hello</span><br><span class="line">hello</span><br><span class="line">zpf@debian:~/Test/docker$ docker ps</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND       CREATED         STATUS         PORTS     NAMES</span><br><span class="line">7c574e977a01   ubuntu    <span class="string">&quot;/bin/bash&quot;</span>   8 minutes ago   Up 2 seconds             hello</span><br><span class="line">zpf@debian:~/Test/docker$ docker ps</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND       CREATED         STATUS         PORTS     NAMES</span><br><span class="line">7c574e977a01   ubuntu    <span class="string">&quot;/bin/bash&quot;</span>   9 minutes ago   Up 3 seconds             hello</span><br><span class="line">zpf@debian:~/Test/docker$ docker attach hello</span><br><span class="line">root@7c574e977a01:/<span class="comment"># ls</span></span><br><span class="line">bin  boot  dev  etc  home  lib  lib32  lib64  libx32  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var</span><br></pre></td></tr></table></figure><h2 id="docker-删除容器和镜像"><a href="#docker-删除容器和镜像" class="headerlink" title="docker 删除容器和镜像"></a>docker 删除容器和镜像</h2><figure class="highlight bash"><figcaption><span>docker删除容器和镜像</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除容器</span></span><br><span class="line">zpf@debian:~/Test/docker$ docker ps</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES</span><br><span class="line">zpf@debian:~/Test/docker$ docker ps -a</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND       CREATED          STATUS                      PORTS     NAMES</span><br><span class="line">7c574e977a01   ubuntu    <span class="string">&quot;/bin/bash&quot;</span>   10 minutes ago   Exited (0) 13 seconds ago             hello</span><br><span class="line">zpf@debian:~/Test/docker$ docker rm hello</span><br><span class="line">hello</span><br><span class="line">zpf@debian:~/Test/docker$ docker ps</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES</span><br><span class="line">zpf@debian:~/Test/docker$ docker ps -a</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES</span><br><span class="line"><span class="comment"># 删除镜像</span></span><br><span class="line">zpf@debian:~/Test/docker$ docker images</span><br><span class="line">REPOSITORY   TAG       IMAGE ID       CREATED       SIZE</span><br><span class="line">ubuntu       latest    26b77e58432b   2 weeks ago   72.9MB</span><br><span class="line">zpf@debian:~/Test/docker$ docker images -a</span><br><span class="line">REPOSITORY   TAG       IMAGE ID       CREATED       SIZE</span><br><span class="line">ubuntu       latest    26b77e58432b   2 weeks ago   72.9MB</span><br><span class="line">zpf@debian:~/Test/docker$ docker rmi ubuntu:latest</span><br><span class="line">Untagged: ubuntu:latest</span><br><span class="line">Untagged: ubuntu@sha256:3c9c713e95aa06xxxxxxxxxxd695fb8039aa1f</span><br><span class="line">Deleted: sha256:26b77e58ab82576a0xxxxxxxx24f5cf3dac146d6</span><br><span class="line">Deleted: sha256:9de65d1ec1e4c8xxxxxxxxxfbd7d098d6234f359</span><br><span class="line">Deleted: sha256:e0f8e3axxxxxxxxxxxf17c2bf9d8e5e248cfe5b0</span><br><span class="line">Deleted: sha256:0e64bafdc7ee8xxxxxxxxxxxxeeb569f4a83db56d505</span><br><span class="line">zpf@debian:~/Test/docker$ docker images</span><br><span class="line">REPOSITORY   TAG       IMAGE ID   CREATED   SIZE</span><br><span class="line">zpf@debian:~/Test/docker$ docker images -a</span><br><span class="line">REPOSITORY   TAG       IMAGE ID   CREATED   SIZE</span><br></pre></td></tr></table></figure><h1 id="希望能对你有所帮助-p-o"><a href="#希望能对你有所帮助-p-o" class="headerlink" title="希望能对你有所帮助(p_o)"></a>希望能对你有所帮助(p_o)</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;摘要&lt;br&gt;第一步:安装 Docker&lt;br&gt;终端执行&lt;code&gt;curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun&lt;/code&gt;&lt;br&gt;注意:在我的 debian 
      
    
    </summary>
    
    
      <category term="linux" scheme="https://zhangpf2000.github.io/categories/linux/"/>
    
      <category term="docker" scheme="https://zhangpf2000.github.io/categories/linux/docker/"/>
    
    
      <category term="docker" scheme="https://zhangpf2000.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>docker学习之路</title>
    <link href="https://zhangpf2000.github.io/2021/04/22/docker/docker%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF.html/"/>
    <id>https://zhangpf2000.github.io/2021/04/22/docker/docker%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF.html/</id>
    <published>2021-04-22T09:22:33.000Z</published>
    <updated>2021-04-22T10:48:52.082Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>学习 docker,并通过博客的方式记录下来<br>参考的书籍是<code>Docker 基础与实战</code></p><ul><li>书名: Docker 基础与实战</li><li>ISBN: 978-7-115-41962-0</li><li>封面</li><li><img src="https://bkimg.cdn.bcebos.com/pic/7af40ad162d9f2d39e7d5e05a7ec8a136227cce8?x-bce-process=image/resize,m_lfit,w_268,limit_1/format,f_jpg" alt="封面"></li></ul></blockquote><span id="more"></span><blockquote><p>目录<br>第 01 章: Docker<br>第 02 章: 安装 Docker<br>第 03 章: 使用 Docker<br>第 04 章: 创建 Docker 镜像<br>第 05 章: 查看 Docker<br>第 06 章: 灵活使用 Docker<br>第 07 章: 详细了解 Dockerfile<br>第 08 章: 使用 Docker 部署应用程序<br>第 09 章: Docker 监控<br>第 10 章: 在 Amazon Web Services 中使用 Docker<br>第 11 章: 在 Google Cloud Platform 中使用 Docker<br>第 12 章: 使用 Docker Hub<br>第 13 章: 使用 Docker Remote API<br>第 14 章: 使用 CentOS<br>第 15 章: 使用 Docker 搭建 WordPress 博客<br>第 16 章: 使用 Docker 构建 Ruby on Rails 应用<br>第 17 章: 使用 Docker 构建 Django 应用<br>第 18 章: Docker 应用案例<br>第 19 章: Docker 命令与选项列表</p></blockquote><h1 id="希望能对你有所帮助-p-o"><a href="#希望能对你有所帮助-p-o" class="headerlink" title="希望能对你有所帮助(p_o)"></a>希望能对你有所帮助(p_o)</h1>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;h1 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h1&gt;&lt;p&gt;学习 docker,并通过博客的方式记录下来&lt;br&gt;参考的书籍是&lt;code&gt;Docker 基础与实战&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;书名: Docker 基础与实战&lt;/li&gt;
&lt;li&gt;ISBN: 978-7-115-41962-0&lt;/li&gt;
&lt;li&gt;封面&lt;/li&gt;
&lt;li&gt;&lt;img src=&quot;https://bkimg.cdn.bcebos.com/pic/7af40ad162d9f2d39e7d5e05a7ec8a136227cce8?x-bce-process=image/resize,m_lfit,w_268,limit_1/format,f_jpg&quot; alt=&quot;封面&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="linux" scheme="https://zhangpf2000.github.io/categories/linux/"/>
    
      <category term="docker" scheme="https://zhangpf2000.github.io/categories/linux/docker/"/>
    
    
      <category term="docker" scheme="https://zhangpf2000.github.io/tags/docker/"/>
    
  </entry>
  
</feed>
